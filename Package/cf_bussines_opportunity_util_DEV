create or replace PACKAGE BODY cf_bussines_opportunity_util_api IS

-----------------------------------------------------------------------------
-------------------- PRIVATE DECLARATIONS -----------------------------------
-----------------------------------------------------------------------------

-----------------------------------------------------------------------------
-------------------- LU SPECIFIC PUBLIC METHODS -----------------------------
-----------------------------------------------------------------------------
    PROCEDURE set_confirmed (
        attr_ IN VARCHAR2
    ) IS

        PROCEDURE cust (
            attr_ IN VARCHAR2
        ) IS

            --rowkey_                 VARCHAR2(2000) := client_sys.get_item_value('rowkey', attr_);
            opportunity_no_         VARCHAR2(2000) := client_sys.get_item_value('opportunity_no', attr_);
            opportunity_type_       VARCHAR2(2000) := NULL;
            customer_id_            VARCHAR2(2000) := NULL;
            currency_code_          VARCHAR2(2000) := NULL;
            main_representative_id_ VARCHAR2(2000) := NULL;
            probability_            VARCHAR2(2000) := NULL;



         CURSOR get_ot_data is 
            SELECT
                    a.opportunity_type,
                    a.customer_id,
                    a.currency_code,
                    a.main_representative_id,
                    a.probability
                FROM
                    business_opportunity a
                WHERE
                        a.opportunity_no = opportunity_no_;
                    --AND a.objkey = rowkey_;
        BEGIN
          Fnd_Session_Api.Set_Language('bp');
            transaction_sys.set_status_info('Iniciando processamento na oportunidade: '
                                            || opportunity_no_
                                            || '.', 'INFO');
            OPEN get_ot_data ;

            fetch get_ot_data into opportunity_type_, customer_id_, currency_code_, main_representative_id_ ,probability_;

            close get_ot_data;

          opportunity_type_ := business_opportunity_api.get_opportunity_type(opportunity_no_);
            IF ( opportunity_type_ LIKE ( 'LOCACAO%' ) ) THEN 
                transaction_sys.set_status_info('Oportunidade seguira para o Contrato recorrente.', 'INFO');
                create_contrac_agr(opportunity_no_, customer_id_, currency_code_, main_representative_id_);
            ELSIF ( opportunity_type_ LIKE ('VENDA%')) or (opportunity_type_ = ('EVENTOS') ) THEN
                transaction_sys.set_status_info('Oportunidade seguira para a Cotação de venda.', 'INFO');
                create_cotacao(opportunity_no_, probability_ ,customer_id_, currency_code_, main_representative_id_);
            ELSE 
            RAISE_APPLICATION_ERROR(-20100, 'ERRO : '||opportunity_type_||'.');
            END IF;

        END cust;

    BEGIN
      Fnd_Session_Api.Set_Language('bp');
        general_sys.init_method(cf_bussines_opportunity_util_api.lu_name_, 'CF_BUSSINES_OPPORTUNITY_UTIL_API', 'SET_CONFIRMED');
        cust(attr_);
    END set_confirmed;

    PROCEDURE create_contrac_agr (
        opportunity_no_         IN VARCHAR2,
        customer_id_            IN VARCHAR2,
        currency_code_          IN VARCHAR2,
        main_representative_id_ IN VARCHAR2
    ) IS



            var2_                       VARCHAR2(32000) := NULL;
            contrato_recorrente_ad_     VARCHAR2(32000) := NULL;
            line_no_                    VARCHAR2(32000) := NULL;
            attr_                       VARCHAR2(32000) := NULL;
            agreement_modality_         VARCHAR2(32000) := NULL;
            perda_                      VARCHAR2(32000) := NULL;
            site_                       VARCHAR2(32000) := NULL;
            objstate_                   VARCHAR2(32000) := NULL;

    -- p0 -> i_hWndFrame.dlgCCreateRecurrentAgreement.lsInfo
            p0_                 VARCHAR2(32000) := '';
    -- p1 -> i_hWndFrame.dlgCCreateRecurrentAgreement.nAgreementId
            p1_                 FLOAT := NULL;
    -- p2 -> i_hWndFrame.dlgCCreateRecurrentAgreement.dfsOpportunityNo
            p2_                 VARCHAR2(32000) := NULL;
    -- p3 -> i_hWndFrame.dlgCCreateRecurrentAgreement.dfsContract
            p3_                 VARCHAR2(32000) := NULL;
    -- p4 -> i_hWndFrame.dlgCCreateRecurrentAgreement.dfsCustomerId
            p4_                 VARCHAR2(32000) := NULL;             
    -- p5 -> i_hWndFrame.dlgCCreateRecurrentAgreement.dfsBillAddrNo
            p5_                 VARCHAR2(32000) := NULL;
    -- p6 -> i_hWndFrame.dlgCCreateRecurrentAgreement.dfsShipAddrNo
            p6_                 VARCHAR2(32000) := NULL;
    -- p7 -> i_hWndFrame.dlgCCreateRecurrentAgreement.dfsCurrencyCode
            p7_                 VARCHAR2(32000) := 'BRL'; 
    -- p8 -> i_hWndFrame.dlgCCreateRecurrentAgreement.dfsAuthorizeCode
            p8_                 VARCHAR2(32000) := NULL;
    -- p9 -> i_hWndFrame.dlgCCreateRecurrentAgreement.cmbProbability.Text
            p9_                 VARCHAR2(32000) := '100%'; 
    -- p10 -> i_hWndFrame.dlgCCreateRecurrentAgreement.dfsMainRepresentativeId
            p10_                VARCHAR2(32000) := main_representative_id_;
    -- p11 -> i_hWndFrame.dlgCCreateRecurrentAgreement.cmbAgreementType.Text
            p11_                VARCHAR2(32000) := NULL;
    -- p12 -> i_hWndFrame.dlgCCreateRecurrentAgreement.cmbAgreementModality.Text
            p12_                VARCHAR2(32000) := NULL;
    -- p13 -> i_hWndFrame.dlgCCreateRecurrentAgreement.dfdWantedDeliveryDate
            p13_                DATE := NULL;
    -- p14 -> i_hWndFrame.dlgCCreateRecurrentAgreement.dfdEndPlannedDate
            p14_                DATE := NULL;

    -- Declaração do cursor com cláusula INTO
            CURSOR create_recurrent_aggr IS
            SELECT
                a.cf$_opportunity_no,
                a.cf$_contract,
                a.cf$_authorize_code,
                a.cf$_customer_id,
                NVL(C_Rec_Agreement_Modality_API.Decode(C_Rec_Agreement_Modality_API.Encode(a.cf$_agreement_modality)),a.cf$_agreement_modality) cf$_agreement_modality ,           
                a.cf$_agreement_type,                    
                a.cf$_billaddrno,
                a.cf$_shipaddrno,
                a.cf$_probability,
                ifslaf.business_opportunity_api.get_state(a.cf$_opportunity_no) AS state , 
                ifslaf.business_opportunity_api.get_main_representative_id(a.cf$_opportunity_no) AS main_representative_id,
                a.CF$_CONTRATO_RECORRENTE,
                a.CF$_CONTRATO_RECORRENTE_AD
            FROM
                ifslaf.laf_req_business_opport_sf_clv a
            WHERE
                a.cf$_opportunity_no = opportunity_no_
            AND a.CF$_CONTRATO_RECORRENTE is null
                fetch first row only;

            cra_cursor          create_recurrent_aggr%rowtype; -- Declaração de variável de cursor


         CURSOR get_line_no is
            SELECT 
                max(a.line_no)
            FROM ifslaf.C_REC_AGREEMENT_ITEM A 
            WHERE  a.LINE_NAME = 'Aditivo'
            and a.agreement_id = contrato_recorrente_ad_
            and a.objstate = 'Planned'
            fetch first row only;

        BEGIN

         Fnd_Session_Api.Set_Language('bp');

            transaction_sys.set_status_info('Iniciando loop para criação do contrato recorrente.', 'INFO');
            OPEN create_recurrent_aggr;
            LOOP
                FETCH create_recurrent_aggr INTO cra_cursor;
                EXIT WHEN create_recurrent_aggr%notfound;
                contrato_recorrente_ad_ := cra_cursor.CF$_CONTRATO_RECORRENTE_AD;
                p2_ := opportunity_no_;
           OPEN get_line_no;
            FETCH get_line_no INTO line_no_;
            close get_line_no ;
                 IF cra_cursor.CF$_CONTRATO_RECORRENTE_AD IS NULL AND cra_cursor.state <> 'Fechado' THEN
            -- Atribuindo valores aos parâmetros com base nos dados do cursor

                    p3_ := cra_cursor.cf$_contract;
                    p4_ := cra_cursor.cf$_customer_id;
                    p5_ := cra_cursor.cf$_billaddrno;
                    p6_ := cra_cursor.cf$_shipaddrno;
                    p8_ := cra_cursor.cf$_authorize_code;
                    p9_ := cra_cursor.cf$_probability;
                    p10_ := cra_cursor.main_representative_id;
                    p11_ := cra_cursor.cf$_agreement_type;
                    p12_ := cra_cursor.cf$_agreement_modality;
                    var2_ := cra_cursor.state;

            -- Chamada à função com os parâmetros atualizados
                    ifslaf.c_recurrent_agreement_api.new(p0_, p1_, p2_, p3_, p4_,
                                                        p5_, p6_, p7_, p8_, p9_,
                                                        p10_, p11_, p12_, p13_, p14_);
                    COMMIT;

                    ELSIF cra_cursor.CF$_CONTRATO_RECORRENTE_AD IS not NULL and cra_cursor.CF$_CONTRATO_RECORRENTE is null THEN
                     if line_no_ is null then 
                       IFSLAF.C_Rec_Agreement_Item_API.New(p2_ , cra_cursor.CF$_CONTRATO_RECORRENTE_AD );
                       commit;
                     else 
                       client_sys.Add_To_Attr('opportunity_no', opportunity_no_, attr_);
                       client_sys.Add_To_Attr('line_no', line_no_, attr_);
                       INSER_MAT(attr_);
                    END IF;
                    END IF;
                 COMMIT;
                transaction_sys.set_status_info('Loop finalizado e contrato recorrente criado: '||p1_|| '.', 'INFO');
            END LOOP;
            CLOSE create_recurrent_aggr;
 BEGIN 
    SELECT A.CF$_CONTRACT
    INTO site_
     FROM IFSLAF.LAF_REQ_BUSINESS_OPPORT_SF_CLV A
    WHERE a.CF$_OPPORTUNITY_NO = opportunity_no_
    fetch first row only;
    exception when no_data_found then 
 RAISE_APPLICATION_ERROR(-20100,'Não foi possivel encontrar o APR CUSTO do contrato. Favor verificar a oportunidade: ' ||opportunity_no_||'.');
 END;

IF ( site_ = '02') then
BEGIN
  transaction_sys.set_status_info('Iniciando a INSER_APR_CUSTO', 'INFO');
   INSER_APR_CUSTO(opportunity_no_ );
  transaction_sys.set_status_info('Finalizando a INSER_APR_CUSTO', 'INFO');
END;
END IF;

BEGIN 
 transaction_sys.set_status_info('Iniciando a INSER_FORM_PGTO', 'INFO');
   INSER_FORM_PGTO(opportunity_no_);
 transaction_sys.set_status_info('Finalizando a INSER_FORM_PGTO', 'INFO');
END;

BEGIN 
 transaction_sys.set_status_info('Iniciando a INSER_SALESMAN_CODE', 'INFO');
   INSER_SALESMAN_CODE(opportunity_no_);
 transaction_sys.set_status_info('Finalizando a INSER_SALESMAN_CODE', 'INFO');
END;

BEGIN
 transaction_sys.set_status_info('Iniciando a INSER_COND_PGTO', 'INFO');
   INSER_COND_PGTO(opportunity_no_);
 transaction_sys.set_status_info('Finalizando a INSER_COND_PGTO', 'INFO');
END;

BEGIN
  transaction_sys.set_status_info('Iniciando a INSER_DATA_PLAN', 'INFO');
   INSER_DATA_PLAN(opportunity_no_);
  transaction_sys.set_status_info('Finalizando a INSER_DATA_PLAN', 'INFO');
END;

BEGIN  
select a.AGREEMENT_MODALITY
 into agreement_modality_
 from ifslaf.C_RECURRENT_AGREEMENT a
 where a.opportunity_no = opportunity_no_;
 exception when no_data_found then 
 RAISE_APPLICATION_ERROR(-20100,'Não foi possivel encontrar a modalidade do contrato. Favor verificar a oportunidade: ' ||opportunity_no_||'.');
 end;
 IF (agreement_modality_ = 'Máquinas') THEN

BEGIN
  transaction_sys.set_status_info('Iniciando a INSER_MOB_DESMOB', 'INFO');
   INSER_MOB_DESMOB(opportunity_no_);
  transaction_sys.set_status_info('Finalizando a INSER_MOB_DESMOB', 'INFO');
END;
ELSIF (agreement_modality_ = 'Módulos') then
BEGIN
  transaction_sys.set_status_info('Iniciando a INSER_MOB_DESMOB_MOD', 'INFO');
   INSER_MOB_DESMOB_MOD(opportunity_no_);
  transaction_sys.set_status_info('Finalizando a INSER_MOB_DESMOB_MOD', 'INFO');
END;

BEGIN
  transaction_sys.set_status_info('Iniciando a INSER_MONT_DESMONT_MOD', 'INFO');
    INSER_MONT_DESMONT_MOD(opportunity_no_);
  transaction_sys.set_status_info('Finalizando a INSER_MONT_DESMONT_MOD', 'INFO');
END;
end if;

BEGIN  
select a.AGREEMENT_MODALITY
 into agreement_modality_
 from ifslaf.C_RECURRENT_AGREEMENT a
 where a.opportunity_no = opportunity_no_;
 exception when no_data_found then 
 RAISE_APPLICATION_ERROR(-20100,'Não foi possivel encontrar a modalidade do contrato. Favor verificar a oportunidade: ' ||opportunity_no_||'.');
 end;
 IF (agreement_modality_ = 'Máquinas') THEN
 BEGIN
  transaction_sys.set_status_info('Iniciando a INSER_INFO_AGGR_MAQ', 'INFO');
    INSER_INFO_AGGR_MAQ(opportunity_no_);
  transaction_sys.set_status_info('Finalizando a INSER_INFO_AGGR_MAQ', 'INFO');
 END;

ELSIF (agreement_modality_ = 'Módulos') then
 BEGIN
  transaction_sys.set_status_info('Iniciando a INSER_INFO_CONTRACT', 'INFO');
    INSER_INFO_CONTRACT(opportunity_no_);
  transaction_sys.set_status_info('Finalizando a INSER_INFO_CONTRACT', 'INFO');
 END;
 end if;

BEGIN
  transaction_sys.set_status_info('Iniciando a INSER_MAT', 'INFO');
    INSER_MAT(opportunity_no_);--,line_no_);
  transaction_sys.set_status_info('Finalizando a INSER_MAT', 'INFO');
END;

BEGIN
  transaction_sys.set_status_info('Iniciando a INSER_TAREF_CASO', 'INFO');
   INSER_TAREF_CASO(opportunity_no_);
  transaction_sys.set_status_info('Finalizando a INSER_TAREF_CASO', 'INFO');
END;

BEGIN 
  SELECT max(B.cf$_lose_reason_id)
   INTO perda_
   FROM IFSLAF.LAF_REQ_BUSINESS_OPPORT_SF_CLV B
   WHERE b.cf$_opportunity_no = opportunity_no_;
   exception 
     when no_data_found then perda_ := null;
END;

 IF (perda_ IS NOT NULL) THEN
  transaction_sys.set_status_info('Iniciando a LOSE_OPPORTUNITY', 'INFO');
   LOSE_OPPORTUNITY (opportunity_no_);
  transaction_sys.set_status_info('Finalizando a LOSE_OPPORTUNITY', 'INFO');
 END IF;

BEGIN 
 select max(a.objstate)
   into objstate_
  from ifslaf.C_REC_AGREEMENT_ITEM a 
  where a.opportunity_no = opportunity_no_;
  exception 
   when no_data_found then objstate_ := null;
end;

IF (objstate_ = 'Planned') then
  transaction_sys.set_status_info('Iniciando a RELEASE_ITEM_AGR', 'INFO');
   RELEASE_ITEM_AGR (opportunity_no_);
  transaction_sys.set_status_info('Finalizando a RELEASE_ITEM_AGR', 'INFO');
END if;

BEGIN
 select max(a.objstate)
   into objstate_
  from ifslaf.C_REC_AGREEMENT_ITEM a 
  where a.opportunity_no = opportunity_no_;
  exception 
   when no_data_found then objstate_ := null;
end;

IF (objstate_ = 'Released') then
  transaction_sys.set_status_info('Iniciando a CREATE_CUSTOMER_ORD_AGR', 'INFO');
    CREATE_CUSTOMER_ORD_AGR(opportunity_no_);
  transaction_sys.set_status_info('Finalizando a CREATE_CUSTOMER_ORD_AGR', 'INFO');
END IF;

BEGIN
 transaction_sys.set_status_info('Iniciando a INSER_OV_RECAGRRE', 'INFO');
 INSER_OV_RECAGRRE(opportunity_no_);
 transaction_sys.set_status_info('Finalizando a INSER_OV_RECAGRRE', 'INFO');
END;

    END create_contrac_agr;

PROCEDURE INSER_APR_CUSTO(opportunity_no_ in VARCHAR2) is

   --opportunity_no_   VARCHAR2(32000) := client_sys.Get_Item_Value('opportunity_no',attr_);
   apr_custo_        VARCHAR2(32000) := NULL;
   p0_               VARCHAR2(32000) := NULL;
   p1_               VARCHAR2(32000) := NULL;
   p2_               VARCHAR2(32000) := NULL;
   p3_               VARCHAR2(32000) := NULL;
   p4_               VARCHAR2(32000) := 'DO';

BEGIN

 Fnd_Session_Api.Set_Language('bp');

    BEGIN
        SELECT b.CF$_APR_CUSTO
         INTO apr_custo_
          from ifslaf.LAF_REQ_BUSINESS_OPPORT_SF_CLV b 
           where b.cf$_opportunity_no = opportunity_no_
        fetch first row only;
         exception when no_data_found 
        then apr_custo_ := 'N';
    END;
    BEGIN
    SELECT a.objid 
    into p1_ 
    FROM ifslaf.C_RECURRENT_AGREEMENT_CFV a
    WHERE a.opportunity_no = opportunity_no_;
    END;
    p2_ := 'CF$_CODE_H'||chr(31)||apr_custo_||chr(30);
 IFSLAF.C_RECURRENT_AGREEMENT_CFP.Cf_Modify__(p0_ , p1_ , p2_ , p3_ , p4_ );
  COMMIT;
 transaction_sys.set_status_info('Foi inserido o Apr Custo', 'INFO');
END INSER_APR_CUSTO;

    PROCEDURE INSER_FORM_PGTO(opportunity_no_ in VARCHAR2) is

 --opportunity_no_  VARCHAR2(32000) := client_sys.Get_Item_Value('opportunity_no',attr_);
 forma_pagamento_  VARCHAR2(32000) := NULL;

   -- p0 -> __lsResult
   p0_ VARCHAR2(32000) := NULL;

   -- p1 -> __sObjid
   p1_ VARCHAR2(32000) := '';

   -- p2 -> __g_Bind.s[0]
   p2_ VARCHAR2(32000) := NULL;

   -- p3 -> __lsAttr
   p3_ VARCHAR2(32000) := '';

   -- p4 -> __sAction
   p4_ VARCHAR2(32000) := 'DO';

BEGIN
 Fnd_Session_Api.Set_Language('bp');

  BEGIN
        SELECT FORMA_PAG_CFP.Encode(b.CF$_LOCAL_PAYMENT_METH)
         INTO forma_pagamento_
          from ifslaf.LAF_REQ_BUSINESS_OPPORT_SF_CLV b 
           where b.cf$_opportunity_no = opportunity_no_
        fetch first row only;
         exception when no_data_found 
        then forma_pagamento_ := 'N';
    END;

    BEGIN
    SELECT a.objid 
  into p1_ 
  FROM ifslaf.C_RECURRENT_AGREEMENT_CFV a
  WHERE a.opportunity_no = opportunity_no_;
    END;
    p2_ := 'CF$_LOCAL_PAYMENT_METHOD_DB'||chr(31)||forma_pagamento_||chr(30);
IFSLAF.C_RECURRENT_AGREEMENT_CFP.Cf_Modify__(p0_ , p1_ , p2_ , p3_ , p4_ );
COMMIT;
transaction_sys.set_status_info('Foi inserido a Forma de Pagamento', 'INFO');
END INSER_FORM_PGTO;

PROCEDURE INSER_SALESMAN_CODE (opportunity_no_ in VARCHAR2) IS 

  --opportunity_no_  VARCHAR2(32000) := client_sys.Get_Item_Value('opportunity_no',attr_);
  vendedor_        VARCHAR2(32000) := null;
   -- p0 -> __lsResult
   p0_ VARCHAR2(32000) := NULL;

   -- p1 -> __sObjid
   p1_ VARCHAR2(32000) := null;

   -- p2 -> __lsObjversion
   p2_ VARCHAR2(32000) := null;

   -- p3 -> __lsAttr
   p3_ VARCHAR2(32000) := null;

   -- p4 -> __sAction
   p4_ VARCHAR2(32000) := 'DO';

BEGIN

 Fnd_Session_Api.Set_Language('bp');

    BEGIN --Selecionando ID_VENDEDOR
    SELECT a.cf$_salesman_code
     INTO vendedor_
      FROM IFSLAF.LAF_REQ_BUSINESS_OPPORT_SF_CLV a 
         WHERE a.cf$_opportunity_no = opportunity_no_
      FETCH FIRST ROW ONLY;
     EXCEPTION WHEN no_data_found 
       then vendedor_ := NULL;
       transaction_sys.set_status_info('Selecionando ID_VENDEDOR: '||opportunity_no_|| '.','INFO');
    END;
    BEGIN --Selecionando Objid , Objversion
    SELECT b.objid , b.objversion 
  into p1_ , p2_
  FROM ifslaf.C_RECURRENT_AGREEMENT_CFV b
  WHERE b.opportunity_no = opportunity_no_;
  transaction_sys.set_status_info('Selecionando Objid , Objversion: '||opportunity_no_|| '.','INFO');
    END;
    p3_:= 'SALESMAN_CODE'||chr(31)||vendedor_||chr(30);
   IFSLAF.C_RECURRENT_AGREEMENT_API.MODIFY__( p0_ , p1_ , p2_ , p3_ , p4_ );
 COMMIT;
 transaction_sys.set_status_info('Vendedor Inserido: '||opportunity_no_||' Vendedor: '||vendedor_||'.','INFO');
END INSER_SALESMAN_CODE;

PROCEDURE INSER_COND_PGTO (opportunity_no_ in VARCHAR2) IS 

  --opportunity_no_        VARCHAR2(32000) := client_sys.Get_Item_Value('opportunity_no',attr_);
  condicaoPagamento_     VARCHAR2(32000) := null;
   -- p0 -> __lsResult
   p0_ VARCHAR2(32000) := NULL;

   -- p1 -> __sObjid
   p1_ VARCHAR2(32000) := NULL;

   -- p2 -> __lsObjversion
   p2_ VARCHAR2(32000) := NULL;

   -- p3 -> __lsAttr
   p3_ VARCHAR2(32000) := NULL;

   -- p4 -> __sAction
   p4_ VARCHAR2(32000) := 'DO';

BEGIN
  Fnd_Session_Api.Set_Language('bp');

     BEGIN --Selecionando ID_VENDEDOR
    SELECT a.cf$_pay_term_id
     INTO condicaoPagamento_
      FROM IFSLAF.LAF_REQ_BUSINESS_OPPORT_SF_CLV a 
         WHERE a.cf$_opportunity_no = opportunity_no_
      FETCH FIRST ROW ONLY;
     EXCEPTION WHEN no_data_found 
       then condicaoPagamento_ := NULL;
       transaction_sys.set_status_info('Selecionando Condição de Pagamento: '||opportunity_no_|| '.','INFO');
    END;
    BEGIN --Selecionando Objid , Objversion
    SELECT b.objid , b.objversion 
  into p1_ , p2_
  FROM ifslaf.C_RECURRENT_AGREEMENT_CFV b
  WHERE b.opportunity_no = opportunity_no_;
  transaction_sys.set_status_info('Selecionando Objid , Objversion: '||opportunity_no_|| '.','INFO');
    END;
    p3_ := 'PAY_TERM_ID'||chr(31)||condicaoPagamento_||chr(30);
   IFSLAF.C_RECURRENT_AGREEMENT_API.MODIFY__( p0_ , p1_ , p2_ , p3_ , p4_ );
 COMMIT;
 transaction_sys.set_status_info('Condição Pagamento Inserido: '||opportunity_no_||' Condiçao Pagamento: '||condicaoPagamento_||'.','INFO');
END INSER_COND_PGTO;

PROCEDURE INSER_DATA_PLAN(opportunity_no_ IN VARCHAR2) IS

   --opportunity_no_  VARCHAR2(32000) := client_sys.Get_Item_Value('opportunity_no',attr_);
   data_planejada_  VARCHAR2(32000) := NULL;

   -- p0 -> __lsResult
   p0_ VARCHAR2(32000) := NULL;

   -- p1 -> __sObjid
   p1_ VARCHAR2(32000) := '';

   -- p2 -> __lsObjversion
   p2_ VARCHAR2(32000) := '';

   -- p3 -> __lsAttr
   p3_ VARCHAR2(32000) := NULL;

   -- p4 -> __sAction
   p4_ VARCHAR2(32000) := 'DO';

BEGIN

 Fnd_Session_Api.Set_Language('bp');

    BEGIN
        SELECT TO_CHAR(b.cf$_wanted_delivery_da,'YYYY/MM/DD HH24:MI:SS') 
         INTO data_planejada_
          from ifslaf.LAF_REQ_BUSINESS_OPPORT_SF_CLV b 
           where b.cf$_opportunity_no = opportunity_no_
        fetch first row only;
         exception when no_data_found 
        then data_planejada_ := 'N';
    END;
  BEGIN
  SELECT a.objid , a.objversion 
  into p1_ , p2_ 
  FROM ifslaf.C_RECURRENT_AGREEMENT a
  WHERE a.opportunity_no = opportunity_no_;
  END; 
  p3_ := 'WANTED_DELIVERY_DATE'||chr(31)||data_planejada_||chr(30);
IFSLAF.C_RECURRENT_AGREEMENT_API.MODIFY__( p0_ , p1_ , p2_ , p3_ , p4_ );
COMMIT;
transaction_sys.set_status_info('Foi Inserido a Data Planejada.','INFO');
END INSER_DATA_PLAN;

PROCEDURE INSER_MOB_DESMOB(opportunity_no_ IN VARCHAR2) IS

   --opportunity_no_  VARCHAR2(32000) := client_sys.Get_Item_Value('opportunity_no',attr_);
   preench_mob_     VARCHAR2(32000) := NULL;
   preench_desmob_  VARCHAR2(32000) := NULL;
   var1_            VARCHAR2(32000) := NULL;

   -- p0 -> __lsResult
   p0_ VARCHAR2(32000) := NULL;

   -- p1 -> __sObjid
   p1_ VARCHAR2(32000) := '';

   -- p2 -> __g_Bind.s[0]
   p2_ VARCHAR2(32000) := NULL;

   -- p3 -> __lsAttr
   p3_ VARCHAR2(32000) := '';

   -- p4 -> __sAction
   p4_ VARCHAR2(32000) := 'DO';

BEGIN

 Fnd_Session_Api.Set_Language('bp');

    BEGIN
        SELECT 'S' , b.CF$_LAF_MOBI , b.CF$_LAF_DESMOBI --,b.CF$_ASSEMBLY 
         INTO var1_ ,preench_mob_ , preench_desmob_ --, preench_mont_
          from ifslaf.LAF_REQ_BUSINESS_OPPORT_SF_CLV b 
           where b.cf$_opportunity_no = opportunity_no_ 
           and b.CF$_AGREEMENT_MODALITY = 'Máquinas'
        fetch first row only;
         exception when no_data_found 
        then NULL;
    END;

    BEGIN
    SELECT a.objid
  into p1_ 
  FROM ifslaf.C_REC_AGREEMENT_INFO_CFV a
  WHERE a.opportunity_no = opportunity_no_;
    END;
    p2_ := 'CF$_LAF_DESMOB'||chr(31)||preench_desmob_||chr(30)||
           'CF$_LAF_MOB'||chr(31)||preench_mob_||chr(30);
IFSLAF.C_REC_AGREEMENT_INFO_CFP.Cf_Modify__(p0_ , p1_ , p2_ , p3_ , p4_ );
COMMIT;
transaction_sys.set_status_info('Foi Inserido a mobilização e desmobilizaçao." Maquinas "','INFO');
END INSER_MOB_DESMOB;

PROCEDURE INSER_MOB_DESMOB_MOD(opportunity_no_ IN VARCHAR2) IS

   --opportunity_no_  VARCHAR2(32000) := client_sys.Get_Item_Value('opportunity_no',attr_);
   preench_mob_     VARCHAR2(32000) := NULL;
   preench_desmob_  VARCHAR2(32000) := NULL;
   var1_            VARCHAR2(32000) := NULL;

   -- p0 -> __lsResult
   p0_ VARCHAR2(32000) := NULL;

   -- p1 -> __sObjid
   p1_ VARCHAR2(32000) := '';

   -- p2 -> __g_Bind.s[0]
   p2_ VARCHAR2(32000) := NULL;

   -- p3 -> __lsAttr
   p3_ VARCHAR2(32000) := '';

   -- p4 -> __sAction
   p4_ VARCHAR2(32000) := 'DO';

BEGIN

 Fnd_Session_Api.Set_Language('bp');

    BEGIN
        SELECT 'S' , b.CF$_LAF_MOBI , b.CF$_LAF_DESMOBI
         INTO var1_ ,preench_mob_ , preench_desmob_
          from ifslaf.LAF_REQ_BUSINESS_OPPORT_SF_CLV b 
           where b.cf$_opportunity_no = opportunity_no_
           and b.CF$_AGREEMENT_MODALITY = 'Módulos'
        fetch first row only;
         exception when no_data_found 
        then var1_ := 'N';
    END;

    BEGIN
    SELECT a.objid
  into p1_ 
  FROM ifslaf.C_REC_AGREEMENT_INFO_CFV a
  WHERE a.opportunity_no = opportunity_no_;
    END;
    p2_ := 'CF$_LAF_DESMOB'||chr(31)||preench_desmob_||chr(30)||'CF$_LAF_MOB'||chr(31)||preench_mob_||chr(30);
IFSLAF.C_REC_AGREEMENT_INFO_CFP.Cf_Modify__(p0_ , p1_ , p2_ , p3_ , p4_ );
COMMIT;
transaction_sys.set_status_info('Foi Inserido a mobilização e desmobilizaçao." Modulos "','INFO');
END INSER_MOB_DESMOB_MOD;

PROCEDURE INSER_MONT_DESMONT_MOD(opportunity_no_ IN VARCHAR2) IS

   --opportunity_no_  VARCHAR2(32000) := client_sys.Get_Item_Value('opportunity_no',attr_);
   preench_mont_    VARCHAR2(32000) := NULL;
   preench_desmont_ VARCHAR2(32000) := NULL;
   var1_            VARCHAR2(32000) := NULL;

   -- p0 -> __lsResult
   p0_ VARCHAR2(32000) := NULL;

   -- p1 -> __sObjid
   p1_ VARCHAR2(32000) := '';

   -- p2 -> __g_Bind.s[0]
   p2_ VARCHAR2(32000) := NULL;

   -- p3 -> __lsAttr
   p3_ VARCHAR2(32000) := NULL;

   -- p4 -> __sAction
   p4_ VARCHAR2(32000) := 'DO';

BEGIN

 Fnd_Session_Api.Set_Language('bp');

        BEGIN
        SELECT 'S' , b.CF$_ASSEMBLY , b.cf$_disassembly
         INTO var1_ ,preench_mont_ , preench_desmont_
          from ifslaf.LAF_REQ_BUSINESS_OPPORT_SF_CLV b 
           where b.cf$_opportunity_no = opportunity_no_
           and b.CF$_AGREEMENT_MODALITY = 'Módulos'
        fetch first row only;
         exception when no_data_found 
        then null;
    END;

      BEGIN
    SELECT a.objid , a.objversion
  into p1_ , p2_
  FROM ifslaf.C_REC_AGREEMENT_INFO a
  WHERE a.opportunity_no = opportunity_no_;
    END;  
    p3_ := 'ASSEMBLY'||chr(31)||preench_mont_||chr(30)||'DISASSEMBLY'||chr(31)||preench_desmont_||chr(30);
IFSLAF.C_REC_AGREEMENT_INFO_API.MODIFY__( p0_ , p1_ , p2_ , p3_ , p4_ );
COMMIT;
transaction_sys.set_status_info('Foi Inserido a montagem e desmontagem.','INFO');
END INSER_MONT_DESMONT_MOD;

PROCEDURE INSER_INFO_AGGR_MAQ (opportunity_no_ in VARCHAR2) is  
   --opportunity_no_           VARCHAR2(32000) := client_sys.Get_Item_Value('opportunity_no',attr_);     
   engraxe_diario_          VARCHAR2(32000) := NULL;
   manutencao_corretiva_    VARCHAR2(32000) := NULL;
   manutencao_preventiva_   VARCHAR2(32000) := NULL;
   material_de_desgate_     VARCHAR2(32000) := NULL;
   seguro_                  VARCHAR2(32000) := NULL;
   oleo_combustivel_        VARCHAR2(32000) := NULL;
   material_de_icamento_    VARCHAR2(32000) := NULL;
   juros_                   VARCHAR2(32000) := 0;
   multa_                   VARCHAR2(32000) := NULL;
   alojOperador_            VARCHAR2(32000) := NULL;
   infoHorimet_             VARCHAR2(32000) := NULL;
   operator_                VARCHAR2(32000) := NULL;
   refeicOperator_          VARCHAR2(32000) := NULL;
   transObraOperador_       VARCHAR2(32000) := NULL;
   var1_                    VARCHAR2(32000) := NULL;
   p0_                      VARCHAR2(32000) := NULL;   
   p1_                      VARCHAR2(32000) := NULL;  
   p2_                      VARCHAR2(32000) := NULL;
   p3_                      VARCHAR2(32000) := NULL;
   p4_                      VARCHAR2(32000) := 'DO';

BEGIN

 Fnd_Session_Api.Set_Language('bp');

BEGIN
   SELECT b.objid , b.objversion 
    INTO p1_ , p2_ 
     FROM ifslaf.C_REC_AGREEMENT_INFO b
      WHERE b.opportunity_no = opportunity_no_;
  END;  
      BEGIN 
   SELECT 'S' , NVL(a.CF$_JUROS,'0')/100 , a.CF$_MULTA/100 ,a.CF$_ENGRAXE_DIARIO , a.CF$_MANUTENCAO_CORRETIVA , a.CF$_MANUTENCAO_PREVENTIVA , a.CF$_MATERIAL_DE_DESGATE , a.CF$_SEGURO , a.CF$_OLEO_COMBUSTIVEL , a.CF$_MATERIAL_DE_ICAMENTO ,
          a.CF$_ALOJAMENTO_OPERADOR , a.CF$_INFORMAR_HORIMETRO , a.CF$_OPERADOR , a.CF$_REFEICAO_DO_OPERADOR , a.CF$_TRANSPORTE_OBRA_ALOJAM 
    INTO  var1_ ,juros_, multa_ , engraxe_diario_ , manutencao_corretiva_ , manutencao_preventiva_ , material_de_desgate_ , seguro_ , oleo_combustivel_ , material_de_icamento_ ,
          alojOperador_ , infoHorimet_ , operator_ , refeicOperator_ , transObraOperador_
     FROM ifslaf.LAF_REQ_BUSINESS_OPPORT_SF_CLV a
      WHERE a.cf$_opportunity_no = opportunity_no_ 
      and a.CF$_AGREEMENT_MODALITY = 'Máquinas'
      fetch first row only;
        exception when no_data_found 
        then var1_ := 'N';
       transaction_sys.set_status_info('Selecionando informações para a inserção na aba Info Contratuais: '||opportunity_no_||'.','INFO');
  END;
    p3_  := 'AGREEMENT_FINE'        ||chr(31)||multa_                 ||chr(30)||
           'AGREEMENT_INTEREST'     ||chr(31)||juros_                 ||chr(30)||
           'DAILY_GREASE'           ||chr(31)||engraxe_diario_        ||chr(30)||
           'CORRECTIVE_MAINTENANCE' ||chr(31)||manutencao_corretiva_  ||chr(30)||
           'PREVENTIVE_MAINTENANCE' ||chr(31)||manutencao_preventiva_ ||chr(30)||
           'MATERIAL_WEAR'          ||chr(31)||material_de_desgate_   ||chr(30)||
           'INSURANCE'              ||chr(31)||seguro_                ||chr(30)||
           'FUEL_OIL'               ||chr(31)||oleo_combustivel_      ||chr(30)||
           'LIFTING_MATERIAL'       ||chr(31)||material_de_icamento_  ||chr(30)||
           'OPERATOR_HOUSING'       ||chr(31)||alojOperador_          ||chr(30)||
           'INFORM_HOURMETER'       ||chr(31)||infoHorimet_           ||chr(30)||
           'OPERATOR'               ||chr(31)||operator_              ||chr(30)||
           'OPERATOR_MEAL'          ||chr(31)||refeicOperator_        ||chr(30)||
           'TRANSPORT_WORK_HOUSING' ||chr(31)||transObraOperador_     ||chr(30);
IFSLAF.C_REC_AGREEMENT_INFO_API.MODIFY__( p0_ , p1_ , p2_ , p3_ , p4_ );
transaction_sys.set_status_info('Inserindo Info Contratuais para Maquinas: '||opportunity_no_||' .','INFO');
COMMIT;
transaction_sys.set_status_info('Foi inserido a Info Contratuais para Maquinas: '||opportunity_no_||' .','INFO');
END INSER_INFO_AGGR_MAQ;

PROCEDURE INSER_INFO_CONTRACT (opportunity_no_ in VARCHAR2) is 
   --opportunity_no_           VARCHAR2(32000) := client_sys.Get_Item_Value('opportunity_no_',attr_);   
   engraxe_diario_          VARCHAR2(32000) := NULL;
   manutencao_corretiva_    VARCHAR2(32000) := NULL;
   manutencao_preventiva_   VARCHAR2(32000) := NULL;
   material_de_desgate_     VARCHAR2(32000) := NULL;
   seguro_                  VARCHAR2(32000) := NULL;
   oleo_combustivel_        VARCHAR2(32000) := NULL;
   material_de_icamento_    VARCHAR2(32000) := NULL;
   juros_                   VARCHAR2(32000) := 0;
   multa_                   VARCHAR2(32000) := NULL;
   p0_                      VARCHAR2(32000) := NULL;   
   p1_                      VARCHAR2(32000) := NULL;  
   p2_                      VARCHAR2(32000) := NULL;
   p3_                      VARCHAR2(32000) := NULL;
   p4_                      VARCHAR2(32000) := 'DO';

BEGIN

  Fnd_Session_Api.Set_Language('bp');

  BEGIN
   SELECT b.objid , b.objversion 
    INTO p1_ , p2_ 
     FROM ifslaf.C_REC_AGREEMENT_INFO b
      WHERE b.opportunity_no = opportunity_no_;
  END; 
  BEGIN 
   SELECT NVL(a.CF$_JUROS,'0')/100 , a.CF$_MULTA/100 ,a.CF$_ENGRAXE_DIARIO , a.CF$_MANUTENCAO_CORRETIVA , a.CF$_MANUTENCAO_PREVENTIVA , a.CF$_MATERIAL_DE_DESGATE , a.CF$_SEGURO , a.CF$_OLEO_COMBUSTIVEL , a.CF$_MATERIAL_DE_ICAMENTO
    INTO  juros_, multa_ , engraxe_diario_ , manutencao_corretiva_ , manutencao_preventiva_ , material_de_desgate_ , seguro_ , oleo_combustivel_ , material_de_icamento_
     FROM ifslaf.LAF_REQ_BUSINESS_OPPORT_SF_CLV a
      WHERE a.cf$_opportunity_no = opportunity_no_
      and a.CF$_AGREEMENT_MODALITY = 'Módulos'
      fetch first row only;
       EXCEPTION WHEN no_data_found then null;
       transaction_sys.set_status_info('Selecionando informações para a inserção na aba Info Contratuais: '||opportunity_no_||'.','INFO');
  END;

   p3_  := 'AGREEMENT_FINE'         ||chr(31)||multa_                 ||chr(30)||
           'AGREEMENT_INTEREST'     ||chr(31)||juros_                 ||chr(30)||
           'DAILY_GREASE'           ||chr(31)||engraxe_diario_        ||chr(30)||
           'CORRECTIVE_MAINTENANCE' ||chr(31)||manutencao_corretiva_  ||chr(30)||
           'PREVENTIVE_MAINTENANCE' ||chr(31)||manutencao_preventiva_ ||chr(30)||
           'MATERIAL_WEAR'          ||chr(31)||material_de_desgate_   ||chr(30)||
           'INSURANCE'              ||chr(31)||seguro_                ||chr(30)||
           'FUEL_OIL'               ||chr(31)||oleo_combustivel_      ||chr(30)||
           'LIFTING_MATERIAL'       ||chr(31)||material_de_icamento_  ||chr(30);
IFSLAF.C_REC_AGREEMENT_INFO_API.MODIFY__( p0_ , p1_ , p2_ , p3_ , p4_ );
COMMIT;
transaction_sys.set_status_info('Inserindo informações na aba Info Contratuais: '||opportunity_no_||'.','INFO');
END INSER_INFO_CONTRACT;

PROCEDURE INSER_MAT(opportunity_no_ in VARCHAR2) is
                    --line_no_        in VARCHAR2) IS 

  --opportunity_no_       VARCHAR2(32000) := client_sys.Get_Item_Value('opportunity_no',attr_);
  id_contrato_          VARCHAR2(32000) := NULL;
  line_no_              VARCHAR2(32000) := NULL;--client_sys.Get_Item_Value('line_no',attr_);
  catalog_no_           VARCHAR2(32000) := NULL;
  qty_negotiated_       VARCHAR2(32000) := NULL;
  rental_price_         VARCHAR2(32000) := NULL;
  rental_period_        VARCHAR2(32000) := NULL;
  var1_                 VARCHAR2(32000) := NULL;
  hour_value_           VARCHAR2(32000) := NULL;
  agreement_guarantee_  VARCHAR2(32000) := NULL;
  objid_                VARCHAR2(32000) := NULL;
  objversion_           VARCHAR2(32000) := NULL;
  service_hour_price_   VARCHAR2(32000) := NULL;
  service_period_       VARCHAR2(32000) := NULL;
  open_freight_db_      VARCHAR2(32000) := NULL;

   -- p0 -> __lsResult
   p0_ VARCHAR2(32000) := NULL;

   -- p1 -> __sObjid
   p1_ VARCHAR2(32000) := NULL;

   -- p2 -> __lsObjversion
   p2_ VARCHAR2(32000) := NULL;

   -- p3 -> __lsAttr
   p3_ VARCHAR2(32000) := NULL;

   -- p4 -> __sAction
   p4_ VARCHAR2(32000) := 'DO';

CURSOR get_catalog_no is 
                SELECT a.*,
                (SELECT C.agreement_id FROM IFSLAF.C_RECURRENT_AGREEMENT C WHERE C.opportunity_no = a.cf$_opportunity_no fetch first row only) id_contrato 
                FROM ifslaf.LAF_REQ_BUSINESS_OPPORT_SF_CLV a          
                WHERE a.cf$_opportunity_no = opportunity_no_
                and   a.CF$_CONTRATO_RECORRENTE is null; 

CURSOR get_number_line is 

                SELECT 
                    max(a.line_no) 
                From ifslaf.C_REC_AGREEMENT_ITEM a 
                WHERE a.opportunity_no = opportunity_no_
                AND a.objstate = 'Planned';


cra_cursor_          get_catalog_no%rowtype; -- Declaração de variável de cursor
BEGIN  

 Fnd_Session_Api.Set_Language('bp');

  OPEN get_number_line;
   FETCH get_number_line INTO line_no_;
  CLOSE get_number_line;

 OPEN get_catalog_no;
  LOOP 
   FETCH get_catalog_no INTO cra_cursor_;
    EXIT WHEN get_catalog_no%NOTFOUND;
BEGIN
    p0_ := null;
IF cra_cursor_.CF$_catalog_no like 'EST%' THEN
    p3_ := 'OPPORTUNITY_NO'     ||chr(31)||cra_cursor_.CF$_opportunity_no      ||chr(30)||
           'AGREEMENT_ID'       ||chr(31)||cra_cursor_.id_contrato             ||chr(30)||
           'LINE_NO'            ||chr(31)||line_no_                            ||chr(30)||
           'CATALOG_NO'         ||chr(31)||cra_cursor_.CF$_catalog_no          ||chr(30)||
           'QTY_NEGOTIATED'     ||chr(31)||cra_cursor_.CF$_qty_negotiated      ||chr(30)||
           'RENTAL_PRICE'       ||chr(31)||cra_cursor_.CF$_SALE_UNIT_PRICE     ||chr(30)||
           'HOUR_VALUE'         ||chr(31)||cra_cursor_.CF$_VALOR_HORA_VARIAVEL ||chr(30)||
           'AGREEMENT_GUARANTEE'||chr(31)||cra_cursor_.CF$_GARANTIA_CONTRATUAL ||chr(30)||
           'RENTAL_PERIOD'      ||chr(31)||cra_cursor_.CF$_rental_period       ||chr(30);
    IFSLAF.C_REC_AGREEMENT_ITEM_PROD_API.NEW__( p0_ , p1_ , p2_ , p3_ , p4_ );
    COMMIT;
ELSIF cra_cursor_.CF$_catalog_no like 'SER%' THEN
    p3_ := 'OPPORTUNITY_NO'     ||chr(31)||cra_cursor_.CF$_opportunity_no      ||chr(30)||
           'AGREEMENT_ID'       ||chr(31)||cra_cursor_.id_contrato             ||chr(30)||
           'LINE_NO'            ||chr(31)||line_no_                            ||chr(30)||
           'CATALOG_NO'         ||chr(31)||cra_cursor_.CF$_catalog_no          ||chr(30)||
           'QTY_NEGOTIATED'     ||chr(31)||cra_cursor_.CF$_qty_negotiated      ||chr(30)||
           'SERVICE_HOUR_PRICE' ||chr(31)||cra_cursor_.CF$_service_hour_price  ||chr(30)||
           'AGREEMENT_GUARANTEE'||chr(31)||cra_cursor_.CF$_GARANTIA_CONTRATUAL ||chr(30)||
           'SERVICE_PERIOD'     ||chr(31)||cra_cursor_.CF$_service_period      ||chr(30)||
           'CF$APPROVED_CLOSED_SHIP_DB' ||chr(31)||CASE cra_cursor_.CF$_APPROVED_CLOSED_SH_DB when '0' then 'FALSE' ELSE 'TRUE' END||chr(30)||
           'OPEN_FREIGHT_DB'    ||chr(31)||CASE cra_cursor_.CF$_open_freight_db  when '0' then 'FALSE' ELSE 'TRUE' END||chr(30);
   ifslaf.c_rec_agreement_item_serv_api.new__( p0_ , p1_ , p2_ , p3_ , p4_ );
COMMIT;
END IF;
      BEGIN 
                   p0_ := null;
                   p3_ := 'CF$_CONTRATO_RECORRENTE'||chr(31)||cra_cursor_.id_contrato||chr(30);
                   IFSLAF.LAF_REQ_BUSINESS_OPPORT_SF_CLP.MODIFY__( p0_ , cra_cursor_.objid , cra_cursor_.objversion , p3_ , 'DO' );
                   COMMIT;
      END;
    END;
  END LOOP;
  transaction_sys.set_status_info('Os materiais foram inseridos para a oportunidade: '||opportunity_no_||' .','INFO');
END INSER_MAT;

 PROCEDURE INSER_TAREF_CASO(opportunity_no_ IN VARCHAR2) IS

    case_id_            NUMBER          := 0;
    activity_name_     VARCHAR2(32000) := 'ANALISE CRITICA DOS REQUISITOS TECNICOS DE SAUDE, SEGURANCA E MEIO AMBIENTE'; -- pegar da tela de oportundiade de negocio sales force. DISPONIBILIDADE PADRAO
    task_type_id_      number := 0; 
    owner_             VARCHAR2(32000) := 'IFSLAF';
    task_id_           VARCHAR2(32000) := NULL;
    desc_ativ_        VARCHAR2(32000) := NULL;
    valor_null_        EXCEPTION;
    --opportunity_no_    VARCHAR2(32000) := '35799';--client_sys.Get_Item_Value('opportunity_no',attr_);
    p0_                VARCHAR2(32000) := NULL;
    p1_                VARCHAR2(32000) := NULL;
    p2_                VARCHAR2(32000) := NULL;
    p3_                VARCHAR2(32000) := NULL;
    p4_                VARCHAR2(32000) := 'DO';
BEGIN 

 Fnd_Session_Api.Set_Language('bp');

         BEGIN -- pegando o case_id a partir da oportunidade do cabeçalho do contrato recorrente
            SELECT A.CASE_ID
             INTO case_id_
             FROM IFSLAF.CC_CASE_CFV A
            WHERE A.CF$_OPORTUNIDADE = opportunity_no_;
          EXCEPTION 
           WHEN NO_DATA_FOUND THEN
           case_id_ := 0;
           transaction_sys.set_status_info('Selecionando Case_Id','INFO');
         END;
         BEGIN 
         SELECT C.ACTIVITY_NAME
          INTO desc_ativ_
          FROM IFSLAF.CC_CASE_TASK C
           WHERE C.CASE_ID = case_id_
           AND C.ACTIVITY_NAME = 'ANALISE CRITICA DOS REQUISITOS TECNICOS DE SAUDE, SEGURANCA E MEIO AMBIENTE'
           FETCH FIRST ROW ONLY;
           exception when no_data_found then 
         desc_ativ_ := NULL;
         transaction_sys.set_status_info('Validando se existe a tarefa: ANALISE CRITICA DOS REQUISITOS TECNICOS DE SAUDE... ','INFO');
         END;
    IF (case_id_ <> 0 AND desc_ativ_ IS NULL) then
         BEGIN -- Acrescenta a task_id somando +100 , para criar a tarefa 'ANALISE CRITICA DOS REQUISITOS TECNICOS DE SAUDE, SEGURANCA E MEIO AMBIENTE'.
            SELECT MAX(B.TASK_ID)
              INTO task_id_
              FROM IFSLAF.CC_CASE_TASK B
             WHERE B.CASE_ID = case_id_;
            IF (task_id_ IS NULL) THEN
               RAISE valor_null_;
            END IF;
         EXCEPTION
            WHEN valor_null_ THEN
               task_id_ := 0;
            WHEN NO_DATA_FOUND THEN
               task_id_ := 0;
                transaction_sys.set_status_info('Selecionando Task_Id.','INFO');
          END;
        client_sys.Clear_Attr(p2_);
        task_id_ := task_id_ + 100;
        p3_      :=    'CASE_ID'          || chr(31) || case_id_                        || chr(30) ||
                       'TASK_ID'          || chr(31) || task_id_                        || chr(30) ||
                       'COMMENTS'         || chr(31) || 'Gentileza realizar a análise.' || chr(30) ||
                       'ACTIVITY_NAME'    || chr(31) || activity_name_                  || chr(30) ||
                       'TASK_ACTIVITY_ID' || chr(31) || '321'                           || chr(30) ||
                       'TASK_TYPE_ID'     || chr(31) || 'PADRAO'                        || chr(30) || --'TASK TYPE ID FIXO " PADRÃO "
                       'OWNER'            || chr(31) || owner_                          || chr(30) || --PASSAR O USUARIO LOGADO '#USER_ID#' no evento
                       'SEVERITY_ID'      || chr(31) || 'PADRAO'                        || chr(30) || --SEVERITY ID FIXO " PADRÃO "
                       'PLANNED_HOUR'     || chr(31) || ''                              || chr(30) || --PLANNED HOUR FIXO " 1 "
                       'USED_HOUR'        || chr(31) || '0'                             || chr(30) || --USED HOUR FIXO " 0 "
                       'INVOICABLE'       || chr(31) || 'FALSE'                         || chr(30);  --INVOICABLE FIXO " FALSE "
     IFSLAF.Log_SYS.Init_Debug_Session_('en');
    IFSLAF.CC_CASE_TASK_API.NEW__( p0_ , p1_ , p2_ , p3_ , p4_ );

     client_sys.Clear_Attr(p2_);
         p2_     := 'WORK_FOLDER'      || chr(31) || 'Default'                                                                   || chr(30) ||
                    'ORGANIZATION_ID'  || chr(31) || 'Processo Comercial'                                                        || chr(30) ||
                    'COMMENTS'         || chr(31) || 'A análise crítica dos requisitos tecnicos de saúde, segurança e meio ambiente a que se refere essa negociação foi realizada pelo consultor de vendas.' || chr(30);
         IFSLAF.Cc_Case_Task_API.Accept_Task_Ownership(case_id_, task_id_, p2_);

         client_sys.Clear_Attr(p2_);
         p2_     := 'WORK_FOLDER'      || chr(31) || 'Default'                                                                   || chr(30) ||
                    'CONDITION_ID'     || chr(31) || '100'                                                                       || chr(30) ||
                    'COMMENTS'         || chr(31) || 'A análise crítica dos requisitos tecnicos de saúde, segurança e meio ambiente a que se refere essa negociação foi realizada pelo consultor de vendas.' || chr(30) ||
                    'SHOW_EXTERNALLY'  || chr(31) || ''                                                                          || chr(30);
         IFSLAF.Cc_Case_Task_API.Complete_Task(case_id_, task_id_, p2_);
END IF;
 transaction_sys.set_status_info('Tarefa Criada , Enviada e Aceitada.','INFO');
END INSER_TAREF_CASO;


PROCEDURE LOSE_OPPORTUNITY (opportunity_no_ in VARCHAR2) IS 

   --opportunity_no_   VARCHAR2(32000) := client_sys.Get_Item_Value('opportunity_no',attr_);
   perda_            VARCHAR2(32000) := null;
   -- p0 -> __lsResult
   p0_ VARCHAR2(32000) := NULL;

   -- p1 -> __sObjid
   p1_ VARCHAR2(32000) := '';

   -- p2 -> __lsObjversion
   p2_ VARCHAR2(32000) := '';

   -- p3 -> __lsAttr
   p3_ VARCHAR2(32000) := NULL;

   -- p4 -> __sAction
   p4_ VARCHAR2(32000) := 'DO';

BEGIN

 Fnd_Session_Api.Set_Language('bp');

  BEGIN 
  SELECT max(B.cf$_lose_reason_id)
   INTO perda_
   FROM IFSLAF.LAF_REQ_BUSINESS_OPPORT_SF_CLV B
   WHERE b.cf$_opportunity_no = opportunity_no_;
   exception 
     when no_data_found then NULL;
  END;
  if ( perda_ is not null ) then 
    BEGIN 
     SELECT a.objid , a.objversion
      INTO p1_ , p2_
     FROM IFSLAF.C_REC_AGREEMENT_ITEM a
    WHERE a.opportunity_no = opportunity_no_
    and  a.line_no = (select max(a.line_no) from ifslaf.C_REC_AGREEMENT_ITEM a where a.opportunity_no = opportunity_no_)
    fetch first row only;
     exception 
     when no_data_found then
     RAISE_APPLICATION_ERROR(-20100,'Não foi possivel PERDER a oportunidade , favor verificar requisitos obrigatorios');
    END;  
    p3_ := 'LOST_REASON_ID'||chr(31)||perda_||chr(30);
   IFSLAF.C_REC_AGREEMENT_ITEM_API.LOSE__( p0_ , p1_ , p2_ , p3_ , p4_ );
end if;
COMMIT;
END;

PROCEDURE RELEASE_ITEM_AGR (opportunity_no_ IN VARCHAR2) is

   --opportunity_no_    VARCHAR2(32000) := client_sys.Get_Item_Value('opportunity_no',attr_);
   -- p0 -> __lsResult
   p0_ VARCHAR2(32000) := NULL;

   -- p1 -> __sObjid
   p1_ VARCHAR2(32000) := '';

   -- p2 -> __lsObjversion
   p2_ VARCHAR2(32000) := '';

   -- p3 -> __lsAttr
   p3_ VARCHAR2(32000) := NULL;

   -- p4 -> __sAction
   p4_ VARCHAR2(32000) := 'DO';

BEGIN

 Fnd_Session_Api.Set_Language('bp');

    BEGIN 
      select a.objid , a.objversion
       into p1_ , p2_ 
      from ifslaf.C_REC_AGREEMENT_ITEM a
      where a.opportunity_no = opportunity_no_
      and a.line_no = (select max(a.line_no) from ifslaf.C_REC_AGREEMENT_ITEM a where a.opportunity_no = opportunity_no_);
      exception 
     when no_data_found then
     RAISE_APPLICATION_ERROR(-20100,'Não foi possivel liberar oportunidade , favor verificar requisitos obrigatorios');
    END;  
IFSLAF.C_REC_AGREEMENT_ITEM_API.RELEASE__( p0_ , p1_ , p2_ , p3_ , p4_ );
transaction_sys.set_status_info('Acionando Bdm "Liberar". Oportunidade:'||opportunity_no_||'.','INFO');
COMMIT;
END RELEASE_ITEM_AGR;

PROCEDURE CREATE_CUSTOMER_ORD_AGR (opportunity_no_ in VARCHAR2) IS

  --opportunity_no_  VARCHAR2(32000) := client_sys.Get_Item_Value('opportunity_no',attr_);
  agreement_id_     VARCHAR2(32000) := NULL;
  objstate_         VARCHAR2(32000) := NULL;
  wonReasonId_      VARCHAR2(32000) := NULL;
  line_no_          VARCHAR2(32000) := NULL;

   -- p0 -> i_hWndFrame.tbwCRecAgreementItem.sOrderNoService
   p0_ VARCHAR2(32000) := '';
   -- p1 -> i_hWndFrame.tbwCRecAgreementItem.sOrderNoDelivery
   p1_ VARCHAR2(32000) := '';
   -- p2 -> i_hWndFrame.tbwCRecAgreementItem.colsOpportunityNo
   p2_ VARCHAR2(32000) := '';
   -- p3 -> i_hWndFrame.tbwCRecAgreementItem.colnAgreementId
   p3_ FLOAT := '';
   -- p4 -> i_hWndFrame.tbwCRecAgreementItem.colnLineNo
   p4_ FLOAT := 1;
   -- p5 -> i_hWndFrame.tbwCRecAgreementItem.sWonReasonId
   p5_ VARCHAR2(32000) := '';
   -- p6 -> i_hWndFrame.tbwCRecAgreementItem.sReasonNote
   p6_ VARCHAR2(32000) := '';
   -- p7 -> i_hWndFrame.tbwCRecAgreementItem.sOrderIdService
   p7_ VARCHAR2(32000) := 'SEO';
   -- p8 -> i_hWndFrame.tbwCRecAgreementItem.nOperationIdService
   p8_ FLOAT := 2031;
   -- p9 -> i_hWndFrame.tbwCRecAgreementItem.sOrderIdDelivery
   p9_ VARCHAR2(32000) := 'OR';
   -- p10 -> i_hWndFrame.tbwCRecAgreementItem.nOperationIdDelivery
   p10_ FLOAT := 2025;

BEGIN 

 Fnd_Session_Api.Set_Language('bp');

    BEGIN
     SELECT a.cf$_won_reason_id ,  
            (SELECT C.agreement_id FROM IFSLAF.C_RECURRENT_AGREEMENT C WHERE C.opportunity_no = a.cf$_opportunity_no fetch first row only) contrato_rec , 
            (SELECT D.LINE_NO  FROM IFSLAF.C_REC_AGREEMENT_ITEM D  WHERE D.opportunity_no = a.cf$_opportunity_no  AND  D.line_no = (select max(a.line_no) from ifslaf.C_REC_AGREEMENT_ITEM a where a.opportunity_no = a.cf$_opportunity_no)) n_linha
       INTO wonReasonId_ , agreement_id_ , line_no_
      FROM ifslaf.laf_req_business_opport_sf_clv a
     WHERE a.cf$_opportunity_no = opportunity_no_
     fetch first row only;
     EXCEPTION WHEN no_data_found then null; 
     transaction_sys.set_status_info('Selecionando Motivo de Ganho','INFO');
    END;
  IFSLAF.C_Rec_Agreem_Delivery_Util_API.Create_Delivery_Orders(  p0_ , p1_ , opportunity_no_ ,  agreement_id_ ,  line_no_ ,  wonReasonId_ ,  p6_ ,  p7_ ,  p8_ ,  p9_ , p10_ );
 COMMIT;
 transaction_sys.set_status_info('Ordem de Venda Criada','INFO');
END CREATE_CUSTOMER_ORD_AGR;

PROCEDURE INSER_OV_RECAGRRE(opportunity_no_ in VARCHAR2) IS 

   --opportunity_no_    VARCHAR2(32000) := client_sys.Get_Item_Value('opportunity_no',attr_);
   ordem_venda_or_     VARCHAR2(32000) := NULL;
   ordem_venda_seo_    VARCHAR2(32000) := NULL;
   n_linha_            VARCHAR2(32000) := NULL;


   p0_ VARCHAR2(32000) := NULL;
   p1_ VARCHAR2(32000) := NULL;
   p2_ VARCHAR2(32000) := NULL;
   p3_ VARCHAR2(32000) := NULL;
   p4_ VARCHAR2(32000) := 'DO';

   CURSOR inser_ov_recagrre IS

SELECT SUBTAB.opportunity_no,
       SUBTAB.N_LINHA,
       SUBTAB.ORDEM_VENDA_OR,
       SUBTAB.ORDEM_VENDA_SEO
FROM (SELECT
     A.CF$_OPPORTUNITY_NO  opportunity_no,

     (SELECT b.LINE_NO 
     FROM C_REC_AGREEMENT_ITEM b
     WHERE b.OPPORTUNITY_NO = a.CF$_OPPORTUNITY_NO
     and b.state = 'Ativo'
     ORDER BY b.DELIVERY_ORDER_NO DESC
     FETCH FIRST ROW ONLY) AS N_LINHA,

     (SELECT b.DELIVERY_ORDER_NO 
     FROM C_REC_AGREEMENT_ITEM b
     WHERE b.OPPORTUNITY_NO = a.CF$_OPPORTUNITY_NO
     and b.state = 'Ativo'
     ORDER BY b.DELIVERY_ORDER_NO DESC 
     FETCH FIRST ROW ONLY) AS ORDEM_VENDA_OR,

    (SELECT b.SERVICE_ORDER_NO 
     FROM C_REC_AGREEMENT_ITEM b
     WHERE b.OPPORTUNITY_NO = a.CF$_OPPORTUNITY_NO
     and b.state = 'Ativo'
     ORDER BY b.SERVICE_ORDER_NO DESC 
     FETCH FIRST ROW ONLY) AS ORDEM_VENDA_SEO

     FROM LAF_REQ_BUSINESS_OPPORT_SF_CLV a) SUBTAB
     WHERE SUBTAB.opportunity_no = opportunity_no_

     group by SUBTAB.opportunity_no,
              SUBTAB.N_LINHA,
              SUBTAB.ORDEM_VENDA_OR,
              SUBTAB.ORDEM_VENDA_SEO;


   rec inser_ov_recagrre%ROWTYPE;

BEGIN

   Fnd_Session_Api.Set_Language('bp');


   OPEN inser_ov_recagrre;
   LOOP
      FETCH inser_ov_recagrre INTO rec;
      EXIT WHEN inser_ov_recagrre%NOTFOUND;


      ordem_venda_or_  := rec.ORDEM_VENDA_OR;
      ordem_venda_seo_ := rec.ORDEM_VENDA_SEO;
      n_linha_         := rec.N_LINHA;

    IF rec.N_LINHA = '1' then

     p3_ := 'CF$_ORDEM_VENDA_OV'     ||chr(31)||ordem_venda_or_ ||chr(30)||
            'CF$_ORDEM_VENDA_SEO'    ||chr(31)||ordem_venda_seo_||chr(30)||
            'CF$_NUMERO_OPORTUNIDADE'||chr(31)||opportunity_no_ ||chr(30);
      IFSLAF.LAF_ORDES_VENDAS_S_F_CLP.NEW__(p0_, p1_, p2_, p3_, p4_);

     ELSIF rec.N_LINHA <> '1' THEN 
    p3_ := 'CF$_ORDEM_VENDA_OV_OR_ADTV'||chr(31)||ordem_venda_or_ ||chr(30)||
           'CF$_ORDEM_VENDA_SEO_ADTV'  ||chr(31)||ordem_venda_seo_||chr(30)||
           'CF$_NUMERO_OPORTUNIDADE'   ||chr(31)||opportunity_no_ ||chr(30);
      IFSLAF.LAF_ORDES_VENDAS_S_F_CLP.NEW__(p0_, p1_, p2_, p3_, p4_);

      END IF;
   END LOOP;

   CLOSE inser_ov_recagrre;
END INSER_OV_RECAGRRE;

-------------------- FINAL PROCEDURE LOCACAO ----------------------------------

                    ------------------------- create_cotacao(opportunity_no_, probability_ ,customer_id_, currency_code_, main_representative_id_);

-------------------- INICIO PROCEDURE VENDA ----------------------------------

-- Evento LAF_INT_SF_016 Bug

PROCEDURE CREATE_COTACAO(
        opportunity_no_         IN VARCHAR2,
        probability_            IN VARCHAR2,
        customer_id_            IN VARCHAR2,
        currency_code_          IN VARCHAR2,
        main_representative_id_ IN VARCHAR2
    ) IS
        bill_addr_no_            VARCHAR2(32000) := NULL;
        ship_addr_no_            VARCHAR2(32000) := NULL;
        contract_                VARCHAR2(32000) := NULL;
        authorize_code_          VARCHAR2(32000) := NULL;
        perda2_                  VARCHAR2(32000) := NULL;
        v_company_               VARCHAR2(32000) := NULL;
        cont_nao_estoc           number := 0;
        cont_estoc               number := 0;

   -- p0 -> i_hWndFrame.frmOpportunity.lsInfo
   p0_ VARCHAR2(32000) := '';

   -- p1 -> i_hWndFrame.frmOpportunity.lsAttr
   p1_ VARCHAR2(32000) := NULL;

   -- p2 -> i_hWndFrame.frmOpportunity.dfsOpportunityNo
   p2_ VARCHAR2(32000) := opportunity_no_;

cursor create_cotacac is 

SELECT A.CF$_CONTRACT, 
       A.CF$_AUTHORIZE_CODE, 
       A.CF$_BILLADDRNO,
       ifslaf.business_opportunity_api.get_main_representative_id(a.cf$_opportunity_no) AS main_representative_id,
       ifslaf.business_opportunity_api.get_state(a.cf$_opportunity_no) AS state , 
       A.CF$_SHIPADDRNO,
       a.cf$_opportunity_no,
       a.cf$_probability

FROM IFSLAF.LAF_REQ_BUSINESS_OPPORT_SF_CLV A
WHERE A.CF$_OPPORTUNITY_NO = opportunity_no_
fetch first row only;

   cra_cursor          create_cotacac%rowtype; -- Declaração de variável de cursor

  BEGIN
         Fnd_Session_Api.Set_Language('bp');
            transaction_sys.set_status_info('Iniciando loop para criação da cotação de venda.', 'INFO');
            OPEN create_cotacac;
            LOOP
                FETCH create_cotacac INTO cra_cursor;
                EXIT WHEN create_cotacac%notfound;
          IF cra_cursor.state <> 'Fechado' THEN
   -- p1 -> i_hWndFrame.frmOpportunity.lsAttr
   p1_ := 'CURRENCY_CODE'           ||chr(31)||currency_code_                   ||chr(30)||
          'HEADER_CONTRACT'         ||chr(31)||cra_cursor.CF$_CONTRACT          ||chr(30)||
          'WANTED_DELIVERY_DATE'    ||chr(31)||''                               ||chr(30)||
          'CHANGE_WANTED_DEL_DATE'  ||chr(31)||'FALSE'                          ||chr(30)||
          'COORDINATOR'             ||chr(31)||cra_cursor.CF$_AUTHORIZE_CODE    ||chr(30)||
          'PROBABILITY'             ||chr(31)||cra_cursor.cf$_probability       ||chr(30)||
          'MAIN_REPRESENTATIVE'     ||chr(31)||cra_cursor.main_representative_id||chr(30)||
          'DELIVERY_ADDRESS'        ||chr(31)||cra_cursor.CF$_SHIPADDRNO        ||chr(30)||
          'DOCUMENT_ADDRESS'        ||chr(31)||cra_cursor.CF$_BILLADDRNO        ||chr(30)||
          'RELEASED_STATUS'         ||chr(31)||'FALSE'                  ||chr(30)||
          'COPY_STATUS'             ||chr(31)||'TRUE'                   ||chr(30)||
          'COPY_CONTACTS'           ||chr(31)||'TRUE'                   ||chr(30)||
          'QUOTATION_NAME'          ||chr(31)||'SALES_QUOTATION'        ||chr(30)||
          'COPY_ALL_REPRESENTATIVES'||chr(31)||'TRUE'                   ||chr(30);

  IFSLAF.BUSINESS_OPPORTUNITY_API.Create_Order_Quotation__( p0_ , p1_ , p2_ );
  transaction_sys.set_status_info('Cotação criada.'||opportunity_no_||'.','INFO');
      COMMIT;     
     END IF;
    END LOOP;
   CLOSE create_cotacac;

 BEGIN
 transaction_sys.set_status_info('Iniciando a inser_requi_ord_vend', 'INFO');
 inser_requi_ord_vend(opportunity_no_);
 transaction_sys.set_status_info('Finalizando a inser_requi_ord_vend', 'INFO');
 END;

 BEGIN
 transaction_sys.set_status_info('Iniciando a inser_data_plan_quotat', 'INFO');
 inser_data_plan_quotat(opportunity_no_);
 transaction_sys.set_status_info('Finalizando a inser_data_plan_quotat', 'INFO');
 END;

 BEGIN 
 transaction_sys.set_status_info('Iniciando a inser_sales_cotac', 'INFO');
 inser_sales_cotac(opportunity_no_);
 transaction_sys.set_status_info('Finalizando a inser_sales_cotac', 'INFO');
 END;

 BEGIN
 transaction_sys.set_status_info('Iniciando a inser_taref_caso_2', 'INFO');
 inser_taref_caso_2(opportunity_no_);
 transaction_sys.set_status_info('Finalizando a inser_taref_caso_2', 'INFO');
 END;

 BEGIN
 transaction_sys.set_status_info('Iniciando a INSER_MAT_QUOT', 'INFO');
 INSER_MAT_QUOT(opportunity_no_);
 transaction_sys.set_status_info('Finalizando a INSER_MAT_QUOT', 'INFO');
 END;

 BEGIN
 transaction_sys.set_status_info('Iniciando a release_order_quotation', 'INFO');
 release_order_quotation(opportunity_no_);
 transaction_sys.set_status_info('Finalizando a release_order_quotation', 'INFO');
 end;

 BEGIN 
  SELECT B.cf$_lose_reason_id
   INTO perda2_
   FROM IFSLAF.LAF_REQ_BUSINESS_OPPORT_SF_CLV B
   WHERE b.cf$_opportunity_no = opportunity_no_
   fetch first row only;
   exception 
     when no_data_found then perda2_ := null;
END;

IF (perda2_ IS NOT NULL ) THEN
 BEGIN
 transaction_sys.set_status_info('Iniciando a lose_cotacao', 'INFO');
 lose_cotacao(opportunity_no_);
 transaction_sys.set_status_info('Finalizando a lose_cotacao', 'INFO');
 END;
 END IF;

BEGIN
FOR r in ( SELECT B.CF$_OPPORTUNITY_NO N_OPORTUNIDADE, 
                   B.CF$_CATALOG_NO    ID_CATALOGO,
                   B.CF$_QUOTATION_NO  ID_COTACAO,
                   IFSLAF.Sales_Part_API.Get_Catalog_Type(B.CF$_CONTRACT ,B.CF$_CATALOG_NO ) TIPO_MAT
             FROM IFSLAF.LAF_REQ_BUSINESS_OPPORT_SF_CLV B
             JOIN IFSLAF.ORDER_QUOTATION_cfv A ON ( B.CF$_OPPORTUNITY_NO = A.BUSINESS_OPPORTUNITY_NO )
                 WHERE B.CF$_OPPORTUNITY_NO = opportunity_no_
                   AND B.CF$_COMPANY in ('14','50') 
                   AND A.CF$_QUOTATION_MODALITY = 'Peças')
    LOOP
        IF (R.TIPO_MAT = 'Mat Não Estocável') THEN
         cont_nao_estoc := cont_nao_estoc + 1;
        ELSE  
         cont_estoc := cont_estoc + 1;
        END IF;
    END LOOP;
  IF cont_nao_estoc > 0 THEN 

    transaction_sys.set_status_info('Iniciando a create_order_cust', 'INFO');    
    create_order_cust(opportunity_no_);
    DBMS_OUTPUT.PUT_LINE('CUST '||cont_nao_estoc);
    transaction_sys.set_status_info('Finalizando a create_order_cust', 'INFO'); 

   ELSIF cont_nao_estoc = 0 AND cont_estoc = 0 THEN 

    transaction_sys.set_status_info('Iniciando a create_order_cust', 'INFO');    
    create_order_cust(opportunity_no_);
    DBMS_OUTPUT.PUT_LINE('CUST '||cont_nao_estoc);
    transaction_sys.set_status_info('Finalizando a create_order_cust', 'INFO'); 

   ELSE 

    transaction_sys.set_status_info('Iniciando a create_order_cust_cor', 'INFO');
    CREATE_ORDER_CUST_COR(opportunity_no_);
    DBMS_OUTPUT.PUT_LINE('COR '||cont_estoc);
    transaction_sys.set_status_info('Finalizando a create_order_cust_cor', 'INFO');

  END IF;
 cont_nao_estoc  := 0;
 cont_estoc  := 0;
END;

BEGIN
 transaction_sys.set_status_info('Iniciando a inser_ov_cot', 'INFO');
 INSER_OV_COT(opportunity_no_);
 transaction_sys.set_status_info('Finalizando a inser_ov_cot', 'INFO');
END;

END CREATE_COTACAO;


-- Evento LAF_INT_SF_021
PROCEDURE INSER_REQUI_ORD_VEND(opportunity_no_ IN VARCHAR2) IS

  laf_desmob_          VARCHAR2(32000) := NULL;
  laf_mob_             VARCHAR2(32000) := NULL;
  quotation_modality_  VARCHAR2(32000) := NULL;  
  --opportunity_no_      VARCHAR2(32000) := client_sys.Get_Item_Value('opportunity_no',attr_);
  var1_                VARCHAR2(32000) := NULL;
   -- p0 -> __lsResult  
   p0_ VARCHAR2(32000) := NULL;

   -- p1 -> __sObjid
   p1_ VARCHAR2(32000) := null;

   -- p2 -> __g_Bind.s[0]
   p2_ VARCHAR2(32000) := null;

   -- p3 -> __lsAttr
   p3_ VARCHAR2(32000) := '';

   -- p4 -> __sAction
   p4_ VARCHAR2(32000) := 'DO';

BEGIN
 Fnd_Session_Api.Set_Language('bp');
        BEGIN
        SELECT 'S',b.cf$_laf_desmobi , cf$_laf_mobi , CF$_AGREEMENT_MODALITY
         INTO var1_ , laf_desmob_, laf_mob_ , quotation_modality_ 
          from ifslaf.LAF_REQ_BUSINESS_OPPORT_SF_CLV b 
           where b.cf$_opportunity_no = opportunity_no_
        fetch first row only;
         exception when no_data_found 
        then var1_ := 'N';
        transaction_sys.set_status_info('Não foi encontrada dados suficientes para o preenchimento.', 'INFO');
    END;
     BEGIN
  SELECT a.objid 
  into p1_
  FROM ifslaf.ORDER_QUOTATION a
  WHERE a.business_opportunity_no = opportunity_no_
   fetch first row only;
  END; 
  p2_ := 'CF$_LAF_DESMOB'||chr(31)||laf_desmob_||chr(30)||'CF$_LAF_MOB'||chr(31)||laf_mob_||chr(30)||'CF$_QUOTATION_MODALITY'||chr(31)||quotation_modality_||chr(30);
IFSLAF.ORDER_QUOTATION_CFP.Cf_Modify__(p0_ , p1_ , p2_ , p3_ , p4_ );
transaction_sys.set_status_info('Foi inserido a Desmobilização , Mobilização e Modalide de contrato.', 'INFO');
commit;
END INSER_REQUI_ORD_VEND;


-- Evento LAF_INT_SF_021
PROCEDURE INSER_DATA_PLAN_QUOTAT(opportunity_no_ IN VARCHAR2) IS

   --opportunity_no_  VARCHAR2(32000) := client_sys.Get_Item_Value('opportunity_no',attr_);
   data_planejada_  VARCHAR2(32000) := NULL;
   seguro_          VARCHAR2(32000) := NULL;
   form_pgto_       VARCHAR2(32000) := NULL;
   -- p0 -> __lsResult
   p0_ VARCHAR2(32000) := NULL;

   -- p1 -> __sObjid
   p1_ VARCHAR2(32000) := NULL;

   -- p2 -> __lsObjversion
   p2_ VARCHAR2(32000) := NULL;

   -- p3 -> __lsAttr
   p3_ VARCHAR2(32000) := NULL;

   -- p4 -> __sAction
   p4_ VARCHAR2(32000) := 'DO';

BEGIN
 Fnd_Session_Api.Set_Language('bp');
    BEGIN
        SELECT TO_CHAR(b.cf$_wanted_delivery_da,'YYYY/MM/DD HH24:MI:SS') , CF$_SEGURO , CF$_LOCAL_PAYMENT_METH
         INTO data_planejada_ , seguro_ , form_pgto_
          from ifslaf.LAF_REQ_BUSINESS_OPPORT_SF_CLV b 
           where b.cf$_opportunity_no = opportunity_no_
        fetch first row only;
         exception when no_data_found 
        then data_planejada_ := 'N';
        transaction_sys.set_status_info('Inserindo data planejada.', 'INFO');
    END;
     BEGIN
  SELECT a.objid , a.objversion 
  into p1_ , p2_ 
  FROM ifslaf.ORDER_QUOTATION a
  WHERE a.business_opportunity_no = opportunity_no_;
  END; 
    p3_ := 'WANTED_DELIVERY_DATE'||chr(31)||data_planejada_||chr(30);
IFSLAF.ORDER_QUOTATION_API.MODIFY__( p0_ , p1_ , p2_ , p3_ , p4_ );
transaction_sys.set_status_info('Data planejada inserida.', 'INFO');

 BEGIN
  SELECT a.objid 
  into p1_ 
  FROM ifslaf.ORDER_QUOTATION a
  WHERE a.business_opportunity_no = opportunity_no_;
  END; 
   p2_ := 'CF$_LOCAL_PAYMENT_METHOD'||chr(31)||form_pgto_||chr(30)||
          'CF$_INSURANCE_LIABILITY' ||chr(31)||seguro_   ||chr(30);
IFSLAF.ORDER_QUOTATION_CFP.Cf_Modify__(p0_ , p1_ , p2_ , p3_ , p4_ ); 

transaction_sys.set_status_info('Seguro e metodo de pagamento inserido', 'INFO');
commit;
END INSER_DATA_PLAN_QUOTAT;


PROCEDURE INSER_SALES_COTAC(opportunity_no_ in VARCHAR2) is

   --opportunity_no_  VARCHAR2(32000) := client_sys.Get_Item_Value('opportunity_no',attr_);
   vendedor_  VARCHAR2(32000) := NULL;
   cond_pagament_  VARCHAR2(32000) := NULL;
   -- p0 -> __lsResult
   p0_ VARCHAR2(32000) := NULL;

   -- p1 -> __sObjid
   p1_ VARCHAR2(32000) := '';

   -- p2 -> __lsObjversion
   p2_ VARCHAR2(32000) := '';

   -- p3 -> __lsAttr
   p3_ VARCHAR2(32000) := '';

   -- p4 -> __sAction
   p4_ VARCHAR2(32000) := 'DO';

BEGIN
   Fnd_Session_Api.Set_Language('bp');
      BEGIN --Selecionando ID_VENDEDOR e cond_pagamento
    SELECT a.cf$_salesman_code , CF$_PAY_TERM_ID
     INTO vendedor_ , cond_pagament_
      FROM IFSLAF.LAF_REQ_BUSINESS_OPPORT_SF_CLV a 
         WHERE a.cf$_opportunity_no = opportunity_no_
      FETCH FIRST ROW ONLY;
     EXCEPTION WHEN no_data_found 
       then vendedor_ := NULL;
       transaction_sys.set_status_info('Selecionando ID_VENDEDOR e Condição De Pagamento: '||opportunity_no_|| '.','INFO');
    END;
    BEGIN --Selecionando Objid , Objversion
    SELECT b.objid , b.objversion 
  into p1_ , p2_
  FROM ifslaf.ORDER_QUOTATION b
  WHERE b.business_opportunity_no = opportunity_no_;
  transaction_sys.set_status_info('Selecionando Objid , Objversion: '||opportunity_no_|| '.','INFO');
    END;
   p3_ := 'SALESMAN_CODE'||chr(31)||vendedor_||chr(30)||
          'PAY_TERM_ID'  ||chr(31)||cond_pagament_||chr(30);
IFSLAF.ORDER_QUOTATION_API.MODIFY__( p0_ , p1_ , p2_ , p3_ , p4_ );
  COMMIT;
transaction_sys.set_status_info('Condição De Pagamento Inserido: '||cond_pagament_||' e Vendedor: '||vendedor_||'.','INFO');
END INSER_SALES_COTAC;


-- Evento LAF_INT_SF_019
PROCEDURE INSER_TAREF_CASO_2(opportunity_no_ IN VARCHAR2) IS

    case_id_            NUMBER          := 0;
    activity_name_     VARCHAR2(32000) := 'ANALISE CRITICA DOS REQUISITOS TECNICOS DE SAUDE, SEGURANCA E MEIO AMBIENTE'; -- pegar da tela de oportundiade de negocio sales force. DISPONIBILIDADE PADRAO
    task_type_id_      number := 0; 
    owner_             VARCHAR2(32000) := 'IFSLAF';
    task_id_           VARCHAR2(32000) := NULL;
    desc_ativ_        VARCHAR2(32000) := NULL;
    --valor_null_        EXCEPTION;
    --opportunity_no_    VARCHAR2(32000) := client_sys.Get_Item_Value('opportunity_no',attr_);
    p0_                VARCHAR2(32000) := NULL;
    p1_                VARCHAR2(32000) := NULL;
    p2_                VARCHAR2(32000) := NULL;
    p3_                VARCHAR2(32000) := NULL;
    p4_                VARCHAR2(32000) := 'DO';
BEGIN 
 Fnd_Session_Api.Set_Language('bp');
         BEGIN -- pegando o case_id a partir da oportunidade do cabeçalho do contrato recorrente
            SELECT A.CASE_ID
             INTO case_id_
             FROM IFSLAF.CC_CASE_CFV A
            WHERE A.CF$_OPORTUNIDADE = opportunity_no_;
          EXCEPTION 
           WHEN NO_DATA_FOUND THEN
           case_id_ := 0;
           transaction_sys.set_status_info('Selecionando Case_Id','INFO');
         END;
          BEGIN 
         SELECT C.ACTIVITY_NAME
          INTO desc_ativ_
          FROM IFSLAF.CC_CASE_TASK C
           WHERE C.CASE_ID = case_id_
           AND C.ACTIVITY_NAME = 'ANALISE CRITICA DOS REQUISITOS TECNICOS DE SAUDE, SEGURANCA E MEIO AMBIENTE'
           FETCH FIRST ROW ONLY;
           exception when no_data_found then 
         desc_ativ_ := NULL;
         transaction_sys.set_status_info('Validando se existe a tarefa: ANALISE CRITICA DOS REQUISITOS TECNICOS DE SAUDE... ','INFO');
         END;
    IF (case_id_ <> 0 AND desc_ativ_ IS NULL) then
         BEGIN -- Acrescenta a task_id somando +100 , para criar a tarefa 'ANALISE CRITICA DOS REQUISITOS TECNICOS DE SAUDE, SEGURANCA E MEIO AMBIENTE'.
            SELECT NVL(MAX(B.TASK_ID),0)
              INTO task_id_
              FROM IFSLAF.CC_CASE_TASK B
             WHERE B.CASE_ID = case_id_;
         EXCEPTION
            WHEN NO_DATA_FOUND THEN
               task_id_ := 0;
                transaction_sys.set_status_info('Selecionando Task_Id.','INFO');
          END;
        client_sys.Clear_Attr(p2_);
        task_id_ := task_id_ + 100;
        p3_      :=    'CASE_ID'          || chr(31) || case_id_                        || chr(30) ||
                       'TASK_ID'          || chr(31) || task_id_                        || chr(30) ||
                       'COMMENTS'         || chr(31) || 'Gentileza realizar a análise.' || chr(30) ||
                       'ACTIVITY_NAME'    || chr(31) || activity_name_                  || chr(30) ||
                       'TASK_ACTIVITY_ID' || chr(31) || '321'                           || chr(30) ||
                       'TASK_TYPE_ID'     || chr(31) || 'PADRAO'                        || chr(30) || --'TASK TYPE ID FIXO " PADRÃO "
                       'OWNER'            || chr(31) || owner_                          || chr(30) || --PASSAR O USUARIO LOGADO '#USER_ID#' no evento
                       'SEVERITY_ID'      || chr(31) || 'PADRAO'                        || chr(30) || --SEVERITY ID FIXO " PADRÃO "
                       'PLANNED_HOUR'     || chr(31) || ''                              || chr(30) || --PLANNED HOUR FIXO " 1 "
                       'USED_HOUR'        || chr(31) || '0'                             || chr(30) || --USED HOUR FIXO " 0 "
                       'INVOICABLE'       || chr(31) || 'FALSE'                         || chr(30);  --INVOICABLE FIXO " FALSE "
     IFSLAF.Log_SYS.Init_Debug_Session_('en');
    IFSLAF.CC_CASE_TASK_API.NEW__( p0_ , p1_ , p2_ , p3_ , p4_ );

     client_sys.Clear_Attr(p2_);
         p2_     := 'WORK_FOLDER'      || chr(31) || 'Default'                                                                   || chr(30) ||
                    'ORGANIZATION_ID'  || chr(31) || 'Processo Comercial'                                                        || chr(30) ||
                    'COMMENTS'         || chr(31) || 'A análise crítica dos requisitos tecnicos de saúde, segurança e meio ambiente a que se refere essa negociação foi realizada pelo consultor de vendas.' || chr(30);
         IFSLAF.Cc_Case_Task_API.Accept_Task_Ownership(case_id_, task_id_, p2_);

         client_sys.Clear_Attr(p2_);
         p2_     := 'WORK_FOLDER'      || chr(31) || 'Default'                                                                   || chr(30) ||
                    'CONDITION_ID'     || chr(31) || '100'                                                                       || chr(30) ||
                    'COMMENTS'         || chr(31) || 'A análise crítica dos requisitos tecnicos de saúde, segurança e meio ambiente a que se refere essa negociação foi realizada pelo consultor de vendas.' || chr(30) ||
                    'SHOW_EXTERNALLY'  || chr(31) || ''                                                                          || chr(30);
         IFSLAF.Cc_Case_Task_API.Complete_Task(case_id_, task_id_, p2_);
         commit;

END IF;
 transaction_sys.set_status_info('Tarefa Criada , Enviada e Aceitada.','INFO');
END INSER_TAREF_CASO_2;

PROCEDURE INSER_MAT_QUOT(opportunity_no_ IN VARCHAR2) IS

   --opportunity_no_  VARCHAR2(32000) := client_sys.Get_Item_Value('opportunity_no',attr_);
   catalog_no_            VARCHAR2(32000) := NULL;
   quotation_no_          VARCHAR2(32000) := NULL;
   buy_qty_due_           VARCHAR2(32000) := NULL;
   sale_unit_price_       VARCHAR2(32000) := NULL;
   bill_addr_no_          VARCHAR2(32000) := NULL; 
   contract_              VARCHAR2(32000) := NULL;
   wanted_delivery_date_  VARCHAR2(32000) := NULL;
   company_               VARCHAR2(32000) := NULL;
   ship_addr_no_          VARCHAR2(32000) := NULL;
   objid_                 VARCHAR2(32000) := NULL;
   objversion_            VARCHAR2(32000) := NULL;
   p0_                    VARCHAR2(32000) := NULL;--Result
   p1_                    VARCHAR2(32000) := NULL;--Objid
   p2_                    VARCHAR2(32000) := NULL;--Objversion
   p3_                    VARCHAR2(32000) := NULL;
   p4_                    VARCHAR2(32000) := 'DO';

cursor inser_mat_cot is 

  SELECT a.CF$_CATALOG_NO, 
        a.CF$_COTACAO_VENDA,
        a.CF$_QTY_NEGOTIATED, 
        a.CF$_SALE_UNIT_PRICE, 
        a.CF$_CONTRACT,
        a.objid,
        a.objversion,
        (SELECT C.QUOTATION_NO FROM IFSLAF.ORDER_QUOTATION C WHERE C.business_opportunity_no = a.cf$_opportunity_no fetch first row only) id_cotacao, 
        a.CF$_SHIPADDRNO, 
        a.CF$_COMPANY, 
        a.CF$_WANTED_DELIVERY_DA ,
        a.CF$_BILLADDRNO,
        REPLACE(a.CF$_PROBABILITY, '%', '') CF$_PROBABILITY,
        b.cost,
        CASE B.SOURCING_OPTION WHEN 'Ordem Estoque' THEN 'Ord Estoque'
                               WHEN 'Não fornecido' THEN 'Sem aquisição' END AS CASE_ORD_ESTO,
        b.price_unit_meas,
        b.price_conv_factor,
        b.CATALOG_TYPE,
        b.SALES_UNIT_MEAS,
        b.list_price

     FROM  IFSLAF.LAF_REQ_BUSINESS_OPPORT_SF_CLV a
      join ifslaf.SALES_PART b on a.CF$_CATALOG_NO = b.CATALOG_NO and a.CF$_CONTRACT = b.CONTRACT
     WHERE a.cf$_opportunity_no = opportunity_no_
     and a.CF$_COTACAO_VENDA is null;

      cra_cursor_          inser_mat_cot%rowtype; -- Declaração de variável de cursor
BEGIN
 Fnd_Session_Api.Set_Language('bp');
OPEN inser_mat_cot;
  LOOP 
   FETCH inser_mat_cot INTO cra_cursor_;
    EXIT WHEN inser_mat_cot%NOTFOUND;
BEGIN
    p0_ := null;
    p3_ :=                'CATALOG_NO'              ||chr(31)||cra_cursor_.CF$_CATALOG_NO     ||chr(30)||             
                          'BUY_QTY_DUE'             ||chr(31)||cra_cursor_.CF$_QTY_NEGOTIATED ||chr(30)|| 
                          'PRICE_UNIT_MEAS'         ||chr(31)||cra_cursor_.price_unit_meas    ||chr(30)||
                          'QUOTATION_NO'            ||chr(31)||cra_cursor_.id_cotacao         ||chr(30)||
                          'COST'                    ||chr(31)||cra_cursor_.cost               ||chr(30)||
                          'PRICE_CONV_FACTOR'       ||chr(31)||cra_cursor_.price_conv_factor  ||chr(30)||
                          'ORDER_SUPPLY_TYPE'       ||chr(31)||cra_cursor_.CASE_ORD_ESTO      ||chr(30)||
                          'CONTRACT'                ||chr(31)||cra_cursor_.CF$_CONTRACT       ||chr(30)||
                          'COMPANY'                 ||chr(31)||cra_cursor_.CF$_COMPANY        ||chr(30)||
                          'SALES_UNIT_MEASURE'      ||chr(31)||cra_cursor_.SALES_UNIT_MEAS    ||chr(30)||
                          'CATALOG_TYPE'            ||chr(31)||cra_cursor_.CATALOG_TYPE       ||chr(30)||
                          'SALE_UNIT_PRICE'         ||chr(31)||cra_cursor_.CF$_SALE_UNIT_PRICE||chr(30)||
                          'DEFAULT_ADDR_FLAG_DB'    ||chr(31)||'Y'                            ||chr(30)|| -- passar fixo 'Y'
                          'SHIP_ADDR_NO'            ||chr(31)||cra_cursor_.CF$_SHIPADDRNO     ||chr(30)||
                          'CURRENCY_RATE'           ||chr(31)||'1'                            ||chr(30)||
                          'PRICE_SOURCE'            ||chr(31)||'Material Venda'               ||chr(30)|| -- passar fixo Material de Venda
                          'TAX_LIABILITY'           ||chr(31)||'TAX'                          ||chr(30)|| -- passar fixo TAX            
                          'DISCOUNT'                ||chr(31)||'0'                            ||chr(30)|| -- passar fixo 0
                          'CONFIGURATION_ID'        ||chr(31)||'*'                            ||chr(30)|| -- passar fixo *
                          'BASE_SALE_UNIT_PRICE'    ||chr(31)||cra_cursor_.CF$_SALE_UNIT_PRICE||chr(30)||
                          'BASE_UNIT_PRICE_INCL_TAX'||chr(31)||cra_cursor_.CF$_SALE_UNIT_PRICE||chr(30)||                        
                          'REVISED_QTY_DUE'         ||chr(31)||cra_cursor_.CF$_QTY_NEGOTIATED ||chr(30)||                          
                          'UNIT_PRICE_INCL_TAX'     ||chr(31)||cra_cursor_.CF$_SALE_UNIT_PRICE||chr(30)||
                          'PROBABILITY_TO_WIN'      ||chr(31)||cra_cursor_.CF$_PROBABILITY    ||chr(30)||
                          'PART_PRICE'              ||chr(31)||cra_cursor_.list_price         ||chr(30)||
                          'SINGLE_OCC_ADDR_FLAG'    ||chr(31)||'FALSE'                        ||chr(30)||
                          'TAX_LIABILITY_TYPE_DB'   ||chr(31)||'TAX'                          ||chr(30); -- passar fixo TAX

                          IF cra_cursor_.CF$_CATALOG_NO LIKE 'EST%' THEN
                            p3_ :=  p3_ ||'PART_NO'                 ||chr(31)||cra_cursor_.CF$_CATALOG_NO||chr(30);
                          END IF;
     IFSLAF.ORDER_QUOTATION_LINE_API.NEW__( p0_ , p1_ , p2_ , p3_ , p4_ );
    COMMIT;
     BEGIN
        p0_ := null;
        p3_ := 'CF$_COTACAO_VENDA'||chr(31)||cra_cursor_.id_cotacao||chr(30);
        IFSLAF.LAF_REQ_BUSINESS_OPPORT_SF_CLP.MODIFY__( p0_ ,cra_cursor_.objid , cra_cursor_.objversion, p3_ , p4_ );
     COMMIT;
    END;
   END;
  END LOOP;
END INSER_MAT_QUOT;

-- Evento LAF_INT_SF_028
PROCEDURE RELEASE_ORDER_QUOTATION (opportunity_no_ IN VARCHAR2) is 

   --opportunity_no_    VARCHAR2(32000) := client_sys.Get_Item_Value('opportunity_no',attr_);
   -- p0 -> __lsResult
   p0_ VARCHAR2(32000) := NULL;

   -- p1 -> __sObjid
   p1_ VARCHAR2(32000) := NULL;

   -- p2 -> __lsObjversion
   p2_ VARCHAR2(32000) := NULL;

   -- p3 -> __lsAttr
   p3_ VARCHAR2(32000) := NULL;

   -- p4 -> __sAction
   p4_ VARCHAR2(32000) := 'DO';

BEGIN
   BEGIN 
      select a.objid , a.objversion
       into p1_ , p2_ 
      from ifslaf.ORDER_QUOTATION a
      where a.business_opportunity_no = opportunity_no_
      and a.contract <> '14';
      exception 
     when no_data_found then
     RAISE_APPLICATION_ERROR(-20100,'Não foi possivel liberar oportunidade , favor verificar requisitos obrigatorios');
    END;  
  IFSLAF.ORDER_QUOTATION_API.RELEASE__( p0_ , p1_ , p2_ , p3_ , p4_ );
  transaction_sys.set_status_info('Cotação Liberada.','INFO');
 COMMIT;
END RELEASE_ORDER_QUOTATION;

PROCEDURE LOSE_COTACAO (opportunity_no_ in VARCHAR2) IS 

   --opportunity_no_   VARCHAR2(32000) := client_sys.Get_Item_Value('opportunity_no',attr_);
   perda2_          VARCHAR2(32000) := null;
   -- p0 -> __lsResult
   p0_ VARCHAR2(32000) := NULL;

   -- p1 -> __sObjid
   p1_ VARCHAR2(32000) := null;

   -- p2 -> __lsObjversion
   p2_ VARCHAR2(32000) := null;

   -- p3 -> __lsAttr
   p3_ VARCHAR2(32000) := NULL;

   -- p4 -> __sAction
   p4_ VARCHAR2(32000) := 'DO';

BEGIN
 Fnd_Session_Api.Set_Language('bp');
    BEGIN
     transaction_sys.set_status_info('Verificando perda.','INFO');
      SELECT B.cf$_lose_reason_id
   INTO perda2_
   FROM IFSLAF.LAF_REQ_BUSINESS_OPPORT_SF_CLV B
   WHERE b.cf$_opportunity_no = opportunity_no_
   fetch first row only;
   exception 
     when no_data_found then NULL;
    END;

   IF ( perda2_ is not null ) then 
    BEGIN 
    transaction_sys.set_status_info('Selecionando objid e objversion.','INFO');
     SELECT a.objid , a.objversion
      INTO p1_ , p2_ 
      FROM ifslaf.ORDER_QUOTATION a
       WHERE a.business_opportunity_no = opportunity_no_
       fetch first row only;
    exception 
     when no_data_found then
     RAISE_APPLICATION_ERROR(-20100,'Não foi possivel Perder/Cancelar a Oportunidade , favor verificar requisitos obrigatorios');
    END;
IFSLAF.ORDER_QUOTATION_API.CANCEL__( p0_ , p1_ , p2_ , p3_ , p4_ );
transaction_sys.set_status_info('Cotação de venda Perdida.','INFO');
COMMIT;
END IF;
END LOSE_COTACAO;

PROCEDURE CREATE_ORDER_CUST_COR(opportunity_no_ in VARCHAR2) IS 

   --opportunity_no_  VARCHAR2(32000) := client_sys.Get_Item_Value('opportunity_no',attr_);
   wanted_delivery_date_        DATE           := NULL;
   reason_id_                   VARCHAR2(3200) := NULL;
   main_representative_         VARCHAR2(3200) := NULL;

   -- p0 -> i_hWndFrame.frmOrderQuotation.sQuotationNo
   p0_ VARCHAR2(32000) := NULL;
   -- p1 -> i_hWndFrame.frmOrderQuotation.lsInfo
   p1_ VARCHAR2(32000) := NULL; 
   -- p2 -> i_hWndFrame.frmOrderQuotation.lsAttr
   p2_ VARCHAR2(32000) := NULL;
   -- p3 -> i_hWndFrame.frmOrderQuotation.sStatus
   p3_ VARCHAR2(32000) := null; -- Verificar se é fixo
   -- p4 -> i_hWndFrame.frmOrderQuotation.sEnterPrePostings
   p4_ VARCHAR2(32000) := 'FALSE';
   -- p5 -> i_hWndFrame.frmOrderQuotation.sOverrideWon
   p5_ VARCHAR2(32000) := 'FALSE';

BEGIN
 Fnd_Session_Api.Set_Language('bp');
    BEGIN 
    SELECT CF$_WANTED_DELIVERY_DA , CF$_AUTHORIZE_CODE   , CF$_WON_REASON_ID ,C.QUOTATION_NO
      INTO wanted_delivery_date_  , main_representative_ , reason_id_        , p0_ 
     FROM IFSLAF.LAF_REQ_BUSINESS_OPPORT_SF_CLV A
      JOIN IFSLAF.ORDER_QUOTATION C on a.cf$_opportunity_no = C.business_opportunity_no
    WHERE A.CF$_OPPORTUNITY_NO = opportunity_no_ 
    FETCH FIRST ROW ONLY;
   END;

   p2_ := 'ORDER_ID'                  ||chr(31)||'OV'                 ||chr(30)||
          'WANTED_DELIVERY_DATE'      ||chr(31)||wanted_delivery_date_||chr(30)||
          'REASON_ID'                 ||chr(31)||reason_id_           ||chr(30)||
          'LOSE_WIN_REJECT_NOTE'      ||chr(31)||''                   ||chr(30)|| -- fixo
          'CHANGE_LINE_DELIVERY_DATE' ||chr(31)||'NO'                 ||chr(30)|| -- fixo
          'CUSTOMER_PO_NO'            ||chr(31)||''                   ||chr(30)|| -- fixo
          'LIMIT_SALES_TO_ASSORTMENTS'||chr(31)||'FALSE'              ||chr(30)|| -- fixo
          'COPY_ALL_REPRESENTATIVES'  ||chr(31)||'TRUE'               ||chr(30)|| -- fixo
          'MAIN_REPRESENTATIVE'       ||chr(31)||main_representative_ ||chr(30)||
          'COPY_CONTACTS'             ||chr(31)||'TRUE'               ||chr(30);  -- fixo

IFSLAF.Order_Quotation_API.Create_Order(p0_ , p1_ , p2_ , p3_ , p4_ , p5_ );
COMMIT;
END CREATE_ORDER_CUST_COR;

PROCEDURE CREATE_ORDER_CUST(opportunity_no_ in VARCHAR2) IS 

   --opportunity_no_  VARCHAR2(32000) := client_sys.Get_Item_Value('opportunity_no',attr_);
   wanted_delivery_date_        DATE           := NULL;
   catalog_type_ov_             VARCHAR2(3200) := NULL;
   catalog_type_seo_            VARCHAR2(3200) := NULL;
   reason_id_                   VARCHAR2(3200) := NULL;
   lose_win_reject_note_        VARCHAR2(3200) := NULL;
   main_representative_         VARCHAR2(3200) := NULL;
   -- p0 -> i_hWndFrame.frmOrderQuotation.sQuotationNo
   p0_ VARCHAR2(32000) :=  null;
   -- p1 -> i_hWndFrame.frmOrderQuotation.lsInfo
   p1_ VARCHAR2(32000) := NULL;
   -- p2 -> i_hWndFrame.frmOrderQuotation.lsAttr
   p2_ VARCHAR2(32000) := NULL;
   -- p3 -> i_hWndFrame.frmOrderQuotation.sStatus
   p3_ VARCHAR2(32000) := 'TRUE';
   -- p4 -> i_hWndFrame.frmOrderQuotation.sEnterPrePostings
   p4_ VARCHAR2(32000) := 'FALSE';
   -- p5 -> i_hWndFrame.frmOrderQuotation.sOverrideWon
   p5_ VARCHAR2(32000) := 'FALSE';

BEGIN 
 Fnd_Session_Api.Set_Language('bp');

   BEGIN
    SELECT CF$_WON_REASON_ID, CF$_WANTED_DELIVERY_DA, CF$_AUTHORIZE_CODE , 
    (SELECT C.QUOTATION_NO FROM IFSLAF.ORDER_QUOTATION C WHERE C.business_opportunity_no = a.cf$_opportunity_no fetch first row only) id_cotacao
      INTO reason_id_, wanted_delivery_date_, main_representative_ ,  p0_ 
     FROM IFSLAF.LAF_REQ_BUSINESS_OPPORT_SF_CLV A
     join ifslaf.SALES_PART b on a.CF$_CATALOG_NO = b.CATALOG_NO AND A.CF$_CONTRACT = B.CONTRACT
    WHERE A.CF$_OPPORTUNITY_NO = opportunity_no_ 
    FETCH FIRST ROW ONLY;
  END;
       p2_ := 'ORDER_ID_SALES'             ||chr(31)||'OV' ||chr(30)||
              'ORDER_ID_SALES_NON'         ||chr(31)||'SEO' ||chr(30)||
              'WANTED_DELIVERY_DATE'       ||chr(31)||wanted_delivery_date_      ||chr(30)||
              'REASON_ID'                  ||chr(31)||reason_id_                 ||chr(30)||
              'LOSE_WIN_REJECT_NOTE'       ||chr(31)||lose_win_reject_note_      ||chr(30)||
              'CHANGE_LINE_DELIVERY_DATE'  ||chr(31)||'NO'                       ||chr(30)||
              'CUSTOMER_PO_NO'             ||chr(31)||''                         ||chr(30)||
              'LIMIT_SALES_TO_ASSORTMENTS' ||chr(31)||'FALSE'                    ||chr(30)||
              'COPY_ALL_REPRESENTATIVES'   ||chr(31)||'TRUE'                     ||chr(30)||
              'MAIN_REPRESENTATIVE'        ||chr(31)||main_representative_       ||chr(30)|| 
              'COPY_CONTACTS'              ||chr(31)||'TRUE'                     ||chr(30);

  IFSLAF.Order_Quotation_API.C_Create_Order(p0_ , p1_ , p2_ , p3_ , p4_ , p5_ );
 COMMIT;
END CREATE_ORDER_CUST;

PROCEDURE INSER_OV_COT(opportunity_no_ in VARCHAR2) IS 
   --opportunity_no_  VARCHAR2(32000) := client_sys.Get_Item_Value('opportunity_no',attr_);
   ordem_venda_ov_     VARCHAR2(32000) := NULL;
   ordem_venda_seo_    VARCHAR2(32000) := NULL;


   p0_ VARCHAR2(32000) := NULL;
   p1_ VARCHAR2(32000) := NULL;
   p2_ VARCHAR2(32000) := NULL;
   p3_ VARCHAR2(32000) := NULL;
   p4_ VARCHAR2(32000) := 'DO';

   CURSOR inser_ov_cotac IS
SELECT  SUBTAB.opportunity_no,
        SUBTAB.ORDEM_VENDA_OV,
        SUBTAB.ORDEM_VENDA_SEO
        FROM

         (SELECT
         A.CF$_OPPORTUNITY_NO  opportunity_no,

         (SELECT b.ORDER_NO 
          FROM CUSTOMER_ORDER b
          WHERE b.QUOTATION_NO = a.CF$_QUOTATION_NO
            AND b.ORDER_ID = 'OV'
          FETCH FIRST ROW ONLY) AS ORDEM_VENDA_OV,

         (SELECT b.ORDER_NO 
          FROM CUSTOMER_ORDER b
          WHERE b.QUOTATION_NO = a.CF$_QUOTATION_NO
            AND b.ORDER_ID = 'SEO'
          FETCH FIRST ROW ONLY) AS ORDEM_VENDA_SEO

      FROM LAF_REQ_BUSINESS_OPPORT_SF_CLV a) SUBTAB
     WHERE SUBTAB.opportunity_no = opportunity_no_

     group by SUBTAB.opportunity_no,
              SUBTAB.ORDEM_VENDA_OV,
              SUBTAB.ORDEM_VENDA_SEO;

   -- Registro para armazenar cada linha retornada pelo cursor
   rec inser_ov_cotac%ROWTYPE;

BEGIN
   -- Configuração do idioma
   Fnd_Session_Api.Set_Language('bp');

   -- Abrir o cursor e processar as linhas
   OPEN inser_ov_cotac;
   LOOP
      FETCH inser_ov_cotac INTO rec;
      EXIT WHEN inser_ov_cotac%NOTFOUND;

      -- Atribuir valores retornados do cursor às variáveis
      ordem_venda_ov_  := rec.ORDEM_VENDA_OV;
      ordem_venda_seo_ := rec.ORDEM_VENDA_SEO;

      -- Chamando o procedimento com os valores apropriados
     p3_ := 'CF$_ORDEM_VENDA_OV'     ||chr(31)||ordem_venda_ov_ ||chr(30)||
            'CF$_ORDEM_VENDA_SEO'    ||chr(31)||ordem_venda_seo_||chr(30)||
            'CF$_NUMERO_OPORTUNIDADE'||chr(31)||opportunity_no_ ||chr(30);
      IFSLAF.LAF_ORDES_VENDAS_S_F_CLP.NEW__(p0_, p1_, p2_, p3_, p4_);
   END LOOP;

   -- Fechar o cursor
   CLOSE inser_ov_cotac;
END INSER_OV_COT;

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------

END cf_bussines_opportunity_util_api;
